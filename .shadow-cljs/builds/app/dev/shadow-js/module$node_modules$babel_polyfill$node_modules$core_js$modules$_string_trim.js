["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/_string-trim.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_trim=function(global,require,module,exports){var $export=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_export\"),defined=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_defined\"),fails=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_fails\"),spaces=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_ws\");global=\n\"[\"+spaces+\"]\";var ltrim=RegExp(\"^\"+global+global+\"*\"),rtrim=RegExp(global+global+\"*$\");global=function(KEY,exec,ALIAS){var exp={},FORCE=fails(function(){return!!spaces[KEY]()||\"​\"!=\"​\"[KEY]()});exec=exp[KEY]=FORCE?exec(trim):spaces[KEY];ALIAS&&(exp[ALIAS]=exec);$export($export.P+$export.F*FORCE,\"String\",exp)};var trim=global.trim=function(string,TYPE){string=String(defined(string));TYPE&1&&(string=string.replace(ltrim,\"\"));TYPE&2&&(string=string.replace(rtrim,\"\"));return string};module.exports=\nglobal}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_trim\"] = function(global,require,module,exports) {\nvar $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_defined","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_fails","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_ws","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_export","~$shadow.js"]],"~:properties",["^5",["trim"]],"~:compiled-at",1666267695818,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_trim.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,4EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzI,IAAIC,QAAUH,OAAA,CAAQ,yEAAR,CAAd,CACII,QAAUJ,OAAA,CAAQ,0EAAR,CADd,CAEIK,MAAQL,OAAA,CAAQ,wEAAR,CAFZ,CAGIM,OAASN,OAAA,CAAQ,4EAAR,CACTO,OAAAA;AAAQ,GAARA,CAAcD,MAAdC,CAAuB,GAE3B,KAAIC,MAAQC,MAAA,CAAO,GAAP,CAAaF,MAAb,CAAqBA,MAArB,CAA6B,GAA7B,CAAZ,CACIG,MAAQD,MAAA,CAAOF,MAAP,CAAeA,MAAf,CAAuB,IAAvB,CAERI,OAAAA,CAAWA,QAAS,CAACC,GAAD,CAAMC,IAAN,CAAYC,KAAZ,CAAmB,CACzC,IAAIC,IAAM,EAAV,CACIC,MAAQX,KAAA,CAAM,QAAS,EAAG,CAC5B,MAAO,CAAC,CAACC,MAAA,CAAOM,GAAP,CAAA,EAAT,EAPMK,IAON,EAPMA,IAOoB,CAAIL,GAAJ,CAAA,EADE,CAAlB,CAGRM,KAAAA,CAAKH,GAAA,CAAIH,GAAJ,CAALM,CAAgBF,KAAA,CAAQH,IAAA,CAAKM,IAAL,CAAR,CAAqBb,MAAA,CAAOM,GAAP,CACrCE,MAAJ,GAAWC,GAAA,CAAID,KAAJ,CAAX,CAAwBI,IAAxB,CACAf,QAAA,CAAQA,OAAQiB,CAAAA,CAAhB,CAAoBjB,OAAQkB,CAAAA,CAA5B,CAAgCL,KAAhC,CAAuC,QAAvC,CAAiDD,GAAjD,CAPyC,CAa3C,KAAII,KAAOR,MAASQ,CAAAA,IAAhBA,CAAuBG,QAAS,CAACC,MAAD,CAASC,IAAT,CAAe,CACjDD,MAAA,CAASE,MAAA,CAAOrB,OAAA,CAAQmB,MAAR,CAAP,CACLC,KAAJ,CAAW,CAAX,GAAcD,MAAd,CAAuBA,MAAOG,CAAAA,OAAP,CAAelB,KAAf,CAAsB,EAAtB,CAAvB,CACIgB,KAAJ,CAAW,CAAX,GAAcD,MAAd,CAAuBA,MAAOG,CAAAA,OAAP,CAAehB,KAAf,CAAsB,EAAtB,CAAvB,CACA,OAAOa,OAJ0C,CAOnDtB,OAAOC,CAAAA,OAAP;AAAiBS,MA9BwH;\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/_string-trim.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_trim\\\"] = function(global,require,module,exports) {\\nvar $export = require('./_export');\\nvar defined = require('./_defined');\\nvar fails = require('./_fails');\\nvar spaces = require('./_string-ws');\\nvar space = '[' + spaces + ']';\\nvar non = '\\\\u200b\\\\u0085';\\nvar ltrim = RegExp('^' + space + space + '*');\\nvar rtrim = RegExp(space + space + '*$');\\n\\nvar exporter = function (KEY, exec, ALIAS) {\\n  var exp = {};\\n  var FORCE = fails(function () {\\n    return !!spaces[KEY]() || non[KEY]() != non;\\n  });\\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\\n  if (ALIAS) exp[ALIAS] = fn;\\n  $export($export.P + $export.F * FORCE, 'String', exp);\\n};\\n\\n// 1 -> String#trimLeft\\n// 2 -> String#trimRight\\n// 3 -> String#trim\\nvar trim = exporter.trim = function (string, TYPE) {\\n  string = String(defined(string));\\n  if (TYPE & 1) string = string.replace(ltrim, '');\\n  if (TYPE & 2) string = string.replace(rtrim, '');\\n  return string;\\n};\\n\\nmodule.exports = exporter;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"$export\",\"defined\",\"fails\",\"spaces\",\"space\",\"ltrim\",\"RegExp\",\"rtrim\",\"exporter\",\"KEY\",\"exec\",\"ALIAS\",\"exp\",\"FORCE\",\"non\",\"fn\",\"trim\",\"P\",\"F\",\"exporter.trim\",\"string\",\"TYPE\",\"String\",\"replace\"]\n}\n"]