["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/_math-fround.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_fround=function(global,require,module,exports){var sign=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_sign\");global=Math.pow;var EPSILON=global(2,-52),EPSILON32=global(2,-23),MAX32=global(2,127)*(2-EPSILON32),MIN32=global(2,-126);module.exports=Math.fround||function(x){var $abs=Math.abs(x);x=sign(x);if($abs<MIN32)return x*($abs/MIN32/EPSILON32+1/EPSILON-1/EPSILON)*MIN32*EPSILON32;\nvar a=(1+EPSILON32/EPSILON)*$abs;$abs=a-(a-$abs);return $abs>MAX32||$abs!=$abs?Infinity*x:x*$abs}}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_fround\"] = function(global,require,module,exports) {\n// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_sign"]],"~:properties",["^5",[]],"~:compiled-at",1666267695823,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_fround.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzI,IAAIC,KAAOH,OAAA,CAAQ,4EAAR,CACPI,OAAAA,CAAMC,IAAKD,CAAAA,GACf,KAAIE,QAAUF,MAAA,CAAI,CAAJ,CAAO,CAAC,EAAR,CAAd,CACIG,UAAYH,MAAA,CAAI,CAAJ,CAAO,CAAC,EAAR,CADhB,CAEII,MAAQJ,MAAA,CAAI,CAAJ,CAAO,GAAP,CAARI,EAAuB,CAAvBA,CAA2BD,SAA3BC,CAFJ,CAGIC,MAAQL,MAAA,CAAI,CAAJ,CAAO,CAAC,GAAR,CAMZH,OAAOC,CAAAA,OAAP,CAAiBG,IAAKK,CAAAA,MAAtB,EAAgCA,QAAe,CAACC,CAAD,CAAI,CACjD,IAAIC,KAAOP,IAAKQ,CAAAA,GAAL,CAASF,CAAT,CACPG,EAAAA,CAAQX,IAAA,CAAKQ,CAAL,CAEZ,IAAIC,IAAJ,CAAWH,KAAX,CAAkB,MAAOK,EAAP,EAA+BF,IAA/B,CAAsCH,KAAtC,CAA8CF,SAA9C,CAPP,CAOO,CAPHD,OAOG,CAPO,CAOP,CAPWA,OAOX,EAA2DG,KAA3D,CAAmEF,SACrF;IAAAQ,GAAK,CAALA,CAASR,SAATQ,CAAqBT,OAArBS,EAAgCH,IAChCI,KAAA,CAASD,CAAT,EAAcA,CAAd,CAAkBH,IAAlB,CAEA,OAAII,KAAJ,CAAaR,KAAb,EAAsBQ,IAAtB,EAAgCA,IAAhC,CAAuDC,QAAvD,CAA+CH,CAA/C,CACOA,CADP,CACeE,IATkC,CAbsF;\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/_math-fround.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_fround\\\"] = function(global,require,module,exports) {\\n// 20.2.2.16 Math.fround(x)\\nvar sign = require('./_math-sign');\\nvar pow = Math.pow;\\nvar EPSILON = pow(2, -52);\\nvar EPSILON32 = pow(2, -23);\\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\\nvar MIN32 = pow(2, -126);\\n\\nvar roundTiesToEven = function (n) {\\n  return n + 1 / EPSILON - 1 / EPSILON;\\n};\\n\\nmodule.exports = Math.fround || function fround(x) {\\n  var $abs = Math.abs(x);\\n  var $sign = sign(x);\\n  var a, result;\\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\\n  a = (1 + EPSILON32 / EPSILON) * $abs;\\n  result = a - (a - $abs);\\n  // eslint-disable-next-line no-self-compare\\n  if (result > MAX32 || result != result) return $sign * Infinity;\\n  return $sign * result;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"sign\",\"pow\",\"Math\",\"EPSILON\",\"EPSILON32\",\"MAX32\",\"MIN32\",\"fround\",\"x\",\"$abs\",\"abs\",\"$sign\",\"a\",\"result\",\"Infinity\"]\n}\n"]