["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/app/dist/esm/index.esm2017.js"],"~:js","shadow$provide.module$node_modules$$firebase$app$dist$esm$index_esm2017=function(global,require,module,exports){function _addComponent(app,component){try{app.container.addComponent(component)}catch(e){logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`,e)}}function _registerComponent(component){const componentName=component.name;if(_components.has(componentName))return logger.debug(`There were multiple attempts to register component ${componentName}.`),!1;_components.set(componentName,\ncomponent);for(const app of _apps.values())_addComponent(app,component);return!0}function _getProvider(app,name){const heartbeatController=app.container.getProvider(\"heartbeat\").getImmediate({optional:!0});heartbeatController&&void heartbeatController.triggerHeartbeat();return app.container.getProvider(name)}function initializeApp(_options,rawConfig={}){\"object\"!==typeof rawConfig&&(rawConfig={name:rawConfig});const config=Object.assign({name:\"[DEFAULT]\",automaticDataCollectionEnabled:!1},rawConfig);\nrawConfig=config.name;if(\"string\"!==typeof rawConfig||!rawConfig)throw ERROR_FACTORY.create(\"bad-app-name\",{appName:String(rawConfig)});_options||(_options=(0,_util.getDefaultAppConfig)());if(!_options)throw ERROR_FACTORY.create(\"no-options\");var existingApp=_apps.get(rawConfig);if(existingApp){if((0,_util.deepEqual)(_options,existingApp.options)&&(0,_util.deepEqual)(config,existingApp.config))return existingApp;throw ERROR_FACTORY.create(\"duplicate-app\",{appName:rawConfig});}existingApp=new _component.ComponentContainer(rawConfig);\nfor(var component of _components.values())existingApp.addComponent(component);component=new FirebaseAppImpl(_options,config,existingApp);_apps.set(rawConfig,component);return component}function registerVersion(libraryKeyOrName,version,variant){var _a;let library=null!==(_a=PLATFORM_LOG_STRING[libraryKeyOrName])&&void 0!==_a?_a:libraryKeyOrName;variant&&(library+=`-${variant}`);libraryKeyOrName=library.match(/\\s|\\//);variant=version.match(/\\s|\\//);libraryKeyOrName||variant?(_a=[`Unable to register library \"${library}\" with version \"${version}\":`],\nlibraryKeyOrName&&_a.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`),libraryKeyOrName&&variant&&_a.push(\"and\"),variant&&_a.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`),logger.warn(_a.join(\" \"))):_registerComponent(new _component.Component(`${library}-version`,()=>({library,version}),\"VERSION\"))}function getDbPromise(){dbPromise||(dbPromise=(0,_idb.openDB)(\"firebase-heartbeat-database\",1,{upgrade:(db,oldVersion)=>{switch(oldVersion){case 0:db.createObjectStore(\"firebase-heartbeat-store\")}}}).catch(e=>\n{throw ERROR_FACTORY.create(\"idb-open\",{originalErrorMessage:e.message});}));return dbPromise}function readHeartbeatsFromIndexedDB(app){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){var _a;try{return(yield getDbPromise()).transaction(\"firebase-heartbeat-store\").objectStore(\"firebase-heartbeat-store\").get(`${app.name}!${app.options.appId}`)}catch(e){if(e instanceof _util.FirebaseError)logger.warn(e.message);else{const idbGetError=ERROR_FACTORY.create(\"idb-get\",{originalErrorMessage:null===\n(_a=e)||void 0===_a?void 0:_a.message});logger.warn(idbGetError.message)}}})}function writeHeartbeatsToIndexedDB(app,heartbeatObject){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){var _a;try{var tx=(yield getDbPromise()).transaction(\"firebase-heartbeat-store\",\"readwrite\");yield tx.objectStore(\"firebase-heartbeat-store\").put(heartbeatObject,`${app.name}!${app.options.appId}`);return tx.done}catch(e){e instanceof _util.FirebaseError?logger.warn(e.message):(tx=ERROR_FACTORY.create(\"idb-set\",\n{originalErrorMessage:null===(_a=e)||void 0===_a?void 0:_a.message}),logger.warn(tx.message))}})}function extractHeartbeatsForHeader(heartbeatsCache,maxSize=1024){const heartbeatsToSend=[];let unsentEntries=heartbeatsCache.slice();for(const singleDateHeartbeat of heartbeatsCache){if(heartbeatsCache=heartbeatsToSend.find(hb=>hb.agent===singleDateHeartbeat.agent)){if(heartbeatsCache.dates.push(singleDateHeartbeat.date),countBytes(heartbeatsToSend)>maxSize){heartbeatsCache.dates.pop();break}}else if(heartbeatsToSend.push({agent:singleDateHeartbeat.agent,\ndates:[singleDateHeartbeat.date]}),countBytes(heartbeatsToSend)>maxSize){heartbeatsToSend.pop();break}unsentEntries=unsentEntries.slice(1)}return{heartbeatsToSend,unsentEntries}}function countBytes(heartbeatsCache){return(0,_util.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:heartbeatsCache})).length}Object.defineProperty(exports,\"__esModule\",{value:!0});exports._addComponent=_addComponent;exports._addOrOverwriteComponent=function(app,component){app.container.addOrOverwriteComponent(component)};\nexports._clearComponents=function(){_components.clear()};exports._getProvider=_getProvider;exports._registerComponent=_registerComponent;exports._removeServiceInstance=function(app,name,instanceIdentifier=\"[DEFAULT]\"){_getProvider(app,name).clearInstance(instanceIdentifier)};exports.deleteApp=function(app){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){const name=app.name;_apps.has(name)&&(_apps.delete(name),yield Promise.all(app.container.getProviders().map(provider=>provider.delete())),\napp.isDeleted=!0)})};exports.getApp=function(name=\"[DEFAULT]\"){const app=_apps.get(name);if(!app&&\"[DEFAULT]\"===name)return initializeApp();if(!app)throw ERROR_FACTORY.create(\"no-app\",{appName:name});return app};exports.getApps=function(){return Array.from(_apps.values())};exports.initializeApp=initializeApp;exports.onLog=function(logCallback,options){if(null!==logCallback&&\"function\"!==typeof logCallback)throw ERROR_FACTORY.create(\"invalid-log-argument\");(0,_logger.setUserLogHandler)(logCallback,\noptions)};exports.registerVersion=registerVersion;exports.setLogLevel=function(logLevel){(0,_logger.setLogLevel)(logLevel)};Object.defineProperty(exports,\"FirebaseError\",{enumerable:!0,get:function(){return _util.FirebaseError}});exports._components=exports._apps=exports._DEFAULT_ENTRY_NAME=exports.SDK_VERSION=void 0;var _component=require(\"module$node_modules$$firebase$component$dist$esm$index_esm2017\"),_logger=require(\"module$node_modules$$firebase$logger$dist$esm$index_esm2017\"),_util=require(\"module$node_modules$$firebase$util$dist$index_esm2017\"),\n_idb=require(\"module$node_modules$idb$build$index\");class PlatformLoggerServiceImpl{constructor(container){this.container=container}getPlatformInfoString(){return this.container.getProviders().map(provider=>{const component=provider.getComponent();return\"VERSION\"===(null===component||void 0===component?void 0:component.type)?(provider=provider.getImmediate(),`${provider.library}/${provider.version}`):null}).filter(logString=>logString).join(\" \")}}const logger=new _logger.Logger(\"@firebase/app\");exports._DEFAULT_ENTRY_NAME=\n\"[DEFAULT]\";const PLATFORM_LOG_STRING={[\"@firebase/app\"]:\"fire-core\",[\"@firebase/app-compat\"]:\"fire-core-compat\",[\"@firebase/analytics\"]:\"fire-analytics\",[\"@firebase/analytics-compat\"]:\"fire-analytics-compat\",[\"@firebase/app-check\"]:\"fire-app-check\",[\"@firebase/app-check-compat\"]:\"fire-app-check-compat\",[\"@firebase/auth\"]:\"fire-auth\",[\"@firebase/auth-compat\"]:\"fire-auth-compat\",[\"@firebase/database\"]:\"fire-rtdb\",[\"@firebase/database-compat\"]:\"fire-rtdb-compat\",[\"@firebase/functions\"]:\"fire-fn\",[\"@firebase/functions-compat\"]:\"fire-fn-compat\",\n[\"@firebase/installations\"]:\"fire-iid\",[\"@firebase/installations-compat\"]:\"fire-iid-compat\",[\"@firebase/messaging\"]:\"fire-fcm\",[\"@firebase/messaging-compat\"]:\"fire-fcm-compat\",[\"@firebase/performance\"]:\"fire-perf\",[\"@firebase/performance-compat\"]:\"fire-perf-compat\",[\"@firebase/remote-config\"]:\"fire-rc\",[\"@firebase/remote-config-compat\"]:\"fire-rc-compat\",[\"@firebase/storage\"]:\"fire-gcs\",[\"@firebase/storage-compat\"]:\"fire-gcs-compat\",[\"@firebase/firestore\"]:\"fire-fst\",[\"@firebase/firestore-compat\"]:\"fire-fst-compat\",\n\"fire-js\":\"fire-js\",firebase:\"fire-js-all\"},_apps=new Map;exports._apps=_apps;const _components=new Map;exports._components=_components;const ERROR_FACTORY=new _util.ErrorFactory(\"app\",\"Firebase\",{[\"no-app\"]:\"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()\",[\"bad-app-name\"]:\"Illegal App name: '{$appName}\",[\"duplicate-app\"]:\"Firebase App named '{$appName}' already exists with different options or config\",[\"app-deleted\"]:\"Firebase App named '{$appName}' already deleted\",\n[\"no-options\"]:\"Need to provide options, when not being deployed to hosting via source.\",[\"invalid-app-argument\"]:\"firebase.{$appName}() takes either no argument or a Firebase App instance.\",[\"invalid-log-argument\"]:\"First argument to `onLog` must be null or a function.\",[\"idb-open\"]:\"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.\",[\"idb-get\"]:\"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.\",[\"idb-set\"]:\"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.\",\n[\"idb-delete\"]:\"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.\"});class FirebaseAppImpl{constructor(options,config,container){this._isDeleted=!1;this._options=Object.assign({},options);this._config=Object.assign({},config);this._name=config.name;this._automaticDataCollectionEnabled=config.automaticDataCollectionEnabled;this._container=container;this.container.addComponent(new _component.Component(\"app\",()=>this,\"PUBLIC\"))}get automaticDataCollectionEnabled(){this.checkDestroyed();\nreturn this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(val){this.checkDestroyed();this._automaticDataCollectionEnabled=val}get name(){this.checkDestroyed();return this._name}get options(){this.checkDestroyed();return this._options}get config(){this.checkDestroyed();return this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(val){this._isDeleted=val}checkDestroyed(){if(this.isDeleted)throw ERROR_FACTORY.create(\"app-deleted\",\n{appName:this._name});}}exports.SDK_VERSION=\"9.12.1\";let dbPromise=null;class HeartbeatServiceImpl{constructor(container){this.container=container;this._heartbeatsCache=null;container=this.container.getProvider(\"app\").getImmediate();this._storage=new HeartbeatStorageImpl(container);this._heartbeatsCachePromise=this._storage.read().then(result=>this._heartbeatsCache=result)}triggerHeartbeat(){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){const agent=\n$jscomp$async$this.container.getProvider(\"platform-logger\").getImmediate().getPlatformInfoString(),date=(new Date).toISOString().substring(0,10);null===$jscomp$async$this._heartbeatsCache&&($jscomp$async$this._heartbeatsCache=yield $jscomp$async$this._heartbeatsCachePromise);if($jscomp$async$this._heartbeatsCache.lastSentHeartbeatDate!==date&&!$jscomp$async$this._heartbeatsCache.heartbeats.some(singleDateHeartbeat=>singleDateHeartbeat.date===date))return $jscomp$async$this._heartbeatsCache.heartbeats.push({date,\nagent}),$jscomp$async$this._heartbeatsCache.heartbeats=$jscomp$async$this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat=>{singleDateHeartbeat=(new Date(singleDateHeartbeat.date)).valueOf();return 2592E6>=Date.now()-singleDateHeartbeat}),$jscomp$async$this._storage.overwrite($jscomp$async$this._heartbeatsCache)})}getHeartbeatsHeader(){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){null===$jscomp$async$this._heartbeatsCache&&(yield $jscomp$async$this._heartbeatsCachePromise);\nif(null===$jscomp$async$this._heartbeatsCache||0===$jscomp$async$this._heartbeatsCache.heartbeats.length)return\"\";const date=(new Date).toISOString().substring(0,10),{heartbeatsToSend,unsentEntries}=extractHeartbeatsForHeader($jscomp$async$this._heartbeatsCache.heartbeats),headerString=(0,_util.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:heartbeatsToSend}));$jscomp$async$this._heartbeatsCache.lastSentHeartbeatDate=date;0<unsentEntries.length?($jscomp$async$this._heartbeatsCache.heartbeats=\nunsentEntries,yield $jscomp$async$this._storage.overwrite($jscomp$async$this._heartbeatsCache)):($jscomp$async$this._heartbeatsCache.heartbeats=[],void $jscomp$async$this._storage.overwrite($jscomp$async$this._heartbeatsCache));return headerString})}}class HeartbeatStorageImpl{constructor(app){this.app=app;this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}runIndexedDBEnvironmentCheck(){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){return(0,_util.isIndexedDBAvailable)()?\n(0,_util.validateIndexedDBOpenable)().then(()=>!0).catch(()=>!1):!1})}read(){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){return(yield $jscomp$async$this._canUseIndexedDBPromise)?(yield readHeartbeatsFromIndexedDB($jscomp$async$this.app))||{heartbeats:[]}:{heartbeats:[]}})}overwrite(heartbeatsObject){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){var _a;if(yield $jscomp$async$this._canUseIndexedDBPromise){const existingHeartbeatsObject=\nyield $jscomp$async$this.read();return writeHeartbeatsToIndexedDB($jscomp$async$this.app,{lastSentHeartbeatDate:null!==(_a=heartbeatsObject.lastSentHeartbeatDate)&&void 0!==_a?_a:existingHeartbeatsObject.lastSentHeartbeatDate,heartbeats:heartbeatsObject.heartbeats})}})}add(heartbeatsObject){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){var _a;if(yield $jscomp$async$this._canUseIndexedDBPromise){const existingHeartbeatsObject=yield $jscomp$async$this.read();\nreturn writeHeartbeatsToIndexedDB($jscomp$async$this.app,{lastSentHeartbeatDate:null!==(_a=heartbeatsObject.lastSentHeartbeatDate)&&void 0!==_a?_a:existingHeartbeatsObject.lastSentHeartbeatDate,heartbeats:[...existingHeartbeatsObject.heartbeats,...heartbeatsObject.heartbeats]})}})}}(function(variant){_registerComponent(new _component.Component(\"platform-logger\",container=>new PlatformLoggerServiceImpl(container),\"PRIVATE\"));_registerComponent(new _component.Component(\"heartbeat\",container=>new HeartbeatServiceImpl(container),\n\"PRIVATE\"));registerVersion(\"@firebase/app\",\"0.8.2\",variant);registerVersion(\"@firebase/app\",\"0.8.2\",\"esm2017\");registerVersion(\"fire-js\",\"\")})(\"\")}","~:source","shadow$provide[\"module$node_modules$$firebase$app$dist$esm$index_esm2017\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._addComponent = _addComponent;\nexports._addOrOverwriteComponent = _addOrOverwriteComponent;\nexports._clearComponents = _clearComponents;\nexports._getProvider = _getProvider;\nexports._registerComponent = _registerComponent;\nexports._removeServiceInstance = _removeServiceInstance;\nexports.deleteApp = deleteApp;\nexports.getApp = getApp;\nexports.getApps = getApps;\nexports.initializeApp = initializeApp;\nexports.onLog = onLog;\nexports.registerVersion = registerVersion;\nexports.setLogLevel = setLogLevel;\nObject.defineProperty(exports, \"FirebaseError\", {\n  enumerable: true,\n  get: function () {\n    return _util.FirebaseError;\n  }\n});\nexports._components = exports._apps = exports._DEFAULT_ENTRY_NAME = exports.SDK_VERSION = void 0;\n\nvar _component = require(\"@firebase/component\");\n\nvar _logger = require(\"@firebase/logger\");\n\nvar _util = require(\"@firebase/util\");\n\nvar _idb = require(\"idb\");\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* VERSION */\n  ;\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.8.2\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new _logger.Logger('@firebase/app');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"9.12.1\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nexports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name]: 'fire-js-all'\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nconst _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexports._apps = _apps;\n\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nexports._components = _components;\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"bad-app-name\"\n  /* BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}\",\n  [\"duplicate-app\"\n  /* DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"no-options\"\n  /* NO_OPTIONS */\n  ]: 'Need to provide options, when not being deployed to hosting via source.',\n  [\"invalid-app-argument\"\n  /* INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"idb-open\"\n  /* IDB_OPEN */\n  ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-get\"\n  /* IDB_GET */\n  ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-set\"\n  /* IDB_WRITE */\n  ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-delete\"\n  /* IDB_DELETE */\n  ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\nconst ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new _component.Component('app', () => this, \"PUBLIC\"\n    /* PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nconst SDK_VERSION = version;\nexports.SDK_VERSION = SDK_VERSION;\n\nfunction initializeApp(_options, rawConfig = {}) {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  options || (options = (0, _util.getDefaultAppConfig)());\n\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\"\n    /* NO_OPTIONS */\n    );\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if ((0, _util.deepEqual)(options, existingApp.options) && (0, _util.deepEqual)(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new _component.ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n  const app = _apps.get(name);\n\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nasync function deleteApp(app) {\n  const name = app.name;\n\n  if (_apps.has(name)) {\n    _apps.delete(name);\n\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\n    app.isDeleted = true;\n  }\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new _component.Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  (0, _logger.setUserLogHandler)(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  (0, _logger.setLogLevel)(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = (0, _idb.openDB)(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"idb-open\"\n      /* IDB_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nasync function readHeartbeatsFromIndexedDB(app) {\n  var _a;\n\n  try {\n    const db = await getDbPromise();\n    return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\n  } catch (e) {\n    if (e instanceof _util.FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-get\"\n      /* IDB_GET */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  var _a;\n\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof _util.FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-set\"\n      /* IDB_WRITE */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_HEADER_BYTES = 1024; // 30 days\n\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  async triggerHeartbeat() {\n    const platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    } // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n\n\n    if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({\n        date,\n        agent\n      });\n    } // Remove entries older than 30 days.\n\n\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n      const now = Date.now();\n      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n    });\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n\n\n  async getHeartbeatsHeader() {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    } // If it's still null or the array is empty, there is no data to send.\n\n\n    if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {\n      return '';\n    }\n\n    const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n    const {\n      heartbeatsToSend,\n      unsentEntries\n    } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n    const headerString = (0, _util.base64urlEncodeWithoutPadding)(JSON.stringify({\n      version: 2,\n      heartbeats: heartbeatsToSend\n    })); // Store last sent date to prevent another being logged/sent for the same day.\n\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n\n    return headerString;\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  async runIndexedDBEnvironmentCheck() {\n    if (!(0, _util.isIndexedDBAvailable)()) {\n      return false;\n    } else {\n      return (0, _util.validateIndexedDBOpenable)().then(() => true).catch(() => false);\n    }\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n\n\n  async read() {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return {\n        heartbeats: []\n      };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || {\n        heartbeats: []\n      };\n    }\n  } // overwrite the storage with the provided heartbeats\n\n\n  async overwrite(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  } // add heartbeats\n\n\n  async add(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n      });\n    }\n  }\n\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return (0, _util.base64urlEncodeWithoutPadding)( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new _component.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  _registerComponent(new _component.Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$firebase$logger$dist$esm$index_esm2017","~$module$node_modules$$firebase$util$dist$index_esm2017","~$module$node_modules$idb$build$index","~$module$node_modules$$firebase$component$dist$esm$index_esm2017"]],"~:properties",["^5",["_heartbeatsCachePromise","agent","registerVersion","getApps","optional","_addOrOverwriteComponent","_name","_isDeleted","_registerComponent","automaticDataCollectionEnabled","upgrade","SDK_VERSION","__esModule","_removeServiceInstance","_components","onLog","name","appName","value","enumerable","_clearComponents","_automaticDataCollectionEnabled","_addComponent","dates","_apps","unsentEntries","deleteApp","getApp","_DEFAULT_ENTRY_NAME","app","isDeleted","version","library","_container","setLogLevel","date","heartbeatsToSend","initializeApp","_options","originalErrorMessage","_storage","_heartbeatsCache","FirebaseError","lastSentHeartbeatDate","_canUseIndexedDBPromise","heartbeats","get","_getProvider","_config","container"]],"~:compiled-at",1666337898753,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$app$dist$esm$index_esm2017.js\",\n\"lineCount\":28,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/app/dist/esm/index.esm2017.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$app$dist$esm$index_esm2017\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports._addComponent = _addComponent;\\nexports._addOrOverwriteComponent = _addOrOverwriteComponent;\\nexports._clearComponents = _clearComponents;\\nexports._getProvider = _getProvider;\\nexports._registerComponent = _registerComponent;\\nexports._removeServiceInstance = _removeServiceInstance;\\nexports.deleteApp = deleteApp;\\nexports.getApp = getApp;\\nexports.getApps = getApps;\\nexports.initializeApp = initializeApp;\\nexports.onLog = onLog;\\nexports.registerVersion = registerVersion;\\nexports.setLogLevel = setLogLevel;\\nObject.defineProperty(exports, \\\"FirebaseError\\\", {\\n  enumerable: true,\\n  get: function () {\\n    return _util.FirebaseError;\\n  }\\n});\\nexports._components = exports._apps = exports._DEFAULT_ENTRY_NAME = exports.SDK_VERSION = void 0;\\n\\nvar _component = require(\\\"@firebase/component\\\");\\n\\nvar _logger = require(\\\"@firebase/logger\\\");\\n\\nvar _util = require(\\\"@firebase/util\\\");\\n\\nvar _idb = require(\\\"idb\\\");\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\nclass PlatformLoggerServiceImpl {\\n  constructor(container) {\\n    this.container = container;\\n  } // In initial implementation, this will be called by installations on\\n  // auth token refresh, and installations will send this string.\\n\\n\\n  getPlatformInfoString() {\\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\\n    // version components.\\n\\n    return providers.map(provider => {\\n      if (isVersionServiceProvider(provider)) {\\n        const service = provider.getImmediate();\\n        return `${service.library}/${service.version}`;\\n      } else {\\n        return null;\\n      }\\n    }).filter(logString => logString).join(' ');\\n  }\\n\\n}\\n/**\\r\\n *\\r\\n * @param provider check if this provider provides a VersionService\\r\\n *\\r\\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\\r\\n * provides VersionService. The provider is not necessarily a 'app-version'\\r\\n * provider.\\r\\n */\\n\\n\\nfunction isVersionServiceProvider(provider) {\\n  const component = provider.getComponent();\\n  return (component === null || component === void 0 ? void 0 : component.type) === \\\"VERSION\\\"\\n  /* VERSION */\\n  ;\\n}\\n\\nconst name$o = \\\"@firebase/app\\\";\\nconst version$1 = \\\"0.8.2\\\";\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\nconst logger = new _logger.Logger('@firebase/app');\\nconst name$n = \\\"@firebase/app-compat\\\";\\nconst name$m = \\\"@firebase/analytics-compat\\\";\\nconst name$l = \\\"@firebase/analytics\\\";\\nconst name$k = \\\"@firebase/app-check-compat\\\";\\nconst name$j = \\\"@firebase/app-check\\\";\\nconst name$i = \\\"@firebase/auth\\\";\\nconst name$h = \\\"@firebase/auth-compat\\\";\\nconst name$g = \\\"@firebase/database\\\";\\nconst name$f = \\\"@firebase/database-compat\\\";\\nconst name$e = \\\"@firebase/functions\\\";\\nconst name$d = \\\"@firebase/functions-compat\\\";\\nconst name$c = \\\"@firebase/installations\\\";\\nconst name$b = \\\"@firebase/installations-compat\\\";\\nconst name$a = \\\"@firebase/messaging\\\";\\nconst name$9 = \\\"@firebase/messaging-compat\\\";\\nconst name$8 = \\\"@firebase/performance\\\";\\nconst name$7 = \\\"@firebase/performance-compat\\\";\\nconst name$6 = \\\"@firebase/remote-config\\\";\\nconst name$5 = \\\"@firebase/remote-config-compat\\\";\\nconst name$4 = \\\"@firebase/storage\\\";\\nconst name$3 = \\\"@firebase/storage-compat\\\";\\nconst name$2 = \\\"@firebase/firestore\\\";\\nconst name$1 = \\\"@firebase/firestore-compat\\\";\\nconst name = \\\"firebase\\\";\\nconst version = \\\"9.12.1\\\";\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * The default app name\\r\\n *\\r\\n * @internal\\r\\n */\\n\\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\\nexports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;\\nconst PLATFORM_LOG_STRING = {\\n  [name$o]: 'fire-core',\\n  [name$n]: 'fire-core-compat',\\n  [name$l]: 'fire-analytics',\\n  [name$m]: 'fire-analytics-compat',\\n  [name$j]: 'fire-app-check',\\n  [name$k]: 'fire-app-check-compat',\\n  [name$i]: 'fire-auth',\\n  [name$h]: 'fire-auth-compat',\\n  [name$g]: 'fire-rtdb',\\n  [name$f]: 'fire-rtdb-compat',\\n  [name$e]: 'fire-fn',\\n  [name$d]: 'fire-fn-compat',\\n  [name$c]: 'fire-iid',\\n  [name$b]: 'fire-iid-compat',\\n  [name$a]: 'fire-fcm',\\n  [name$9]: 'fire-fcm-compat',\\n  [name$8]: 'fire-perf',\\n  [name$7]: 'fire-perf-compat',\\n  [name$6]: 'fire-rc',\\n  [name$5]: 'fire-rc-compat',\\n  [name$4]: 'fire-gcs',\\n  [name$3]: 'fire-gcs-compat',\\n  [name$2]: 'fire-fst',\\n  [name$1]: 'fire-fst-compat',\\n  'fire-js': 'fire-js',\\n  [name]: 'fire-js-all'\\n};\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * @internal\\r\\n */\\n\\nconst _apps = new Map();\\n/**\\r\\n * Registered components.\\r\\n *\\r\\n * @internal\\r\\n */\\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\\n\\n\\nexports._apps = _apps;\\n\\nconst _components = new Map();\\n/**\\r\\n * @param component - the component being added to this app's container\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nexports._components = _components;\\n\\nfunction _addComponent(app, component) {\\n  try {\\n    app.container.addComponent(component);\\n  } catch (e) {\\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\\n  }\\n}\\n/**\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nfunction _addOrOverwriteComponent(app, component) {\\n  app.container.addOrOverwriteComponent(component);\\n}\\n/**\\r\\n *\\r\\n * @param component - the component to register\\r\\n * @returns whether or not the component is registered successfully\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nfunction _registerComponent(component) {\\n  const componentName = component.name;\\n\\n  if (_components.has(componentName)) {\\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\\n    return false;\\n  }\\n\\n  _components.set(componentName, component); // add the component to existing app instances\\n\\n\\n  for (const app of _apps.values()) {\\n    _addComponent(app, component);\\n  }\\n\\n  return true;\\n}\\n/**\\r\\n *\\r\\n * @param app - FirebaseApp instance\\r\\n * @param name - service name\\r\\n *\\r\\n * @returns the provider for the service with the matching name\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nfunction _getProvider(app, name) {\\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\\n    optional: true\\n  });\\n\\n  if (heartbeatController) {\\n    void heartbeatController.triggerHeartbeat();\\n  }\\n\\n  return app.container.getProvider(name);\\n}\\n/**\\r\\n *\\r\\n * @param app - FirebaseApp instance\\r\\n * @param name - service name\\r\\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\\n  _getProvider(app, name).clearInstance(instanceIdentifier);\\n}\\n/**\\r\\n * Test only\\r\\n *\\r\\n * @internal\\r\\n */\\n\\n\\nfunction _clearComponents() {\\n  _components.clear();\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n\\nconst ERRORS = {\\n  [\\\"no-app\\\"\\n  /* NO_APP */\\n  ]: \\\"No Firebase App '{$appName}' has been created - \\\" + 'call Firebase App.initializeApp()',\\n  [\\\"bad-app-name\\\"\\n  /* BAD_APP_NAME */\\n  ]: \\\"Illegal App name: '{$appName}\\\",\\n  [\\\"duplicate-app\\\"\\n  /* DUPLICATE_APP */\\n  ]: \\\"Firebase App named '{$appName}' already exists with different options or config\\\",\\n  [\\\"app-deleted\\\"\\n  /* APP_DELETED */\\n  ]: \\\"Firebase App named '{$appName}' already deleted\\\",\\n  [\\\"no-options\\\"\\n  /* NO_OPTIONS */\\n  ]: 'Need to provide options, when not being deployed to hosting via source.',\\n  [\\\"invalid-app-argument\\\"\\n  /* INVALID_APP_ARGUMENT */\\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\\n  [\\\"invalid-log-argument\\\"\\n  /* INVALID_LOG_ARGUMENT */\\n  ]: 'First argument to `onLog` must be null or a function.',\\n  [\\\"idb-open\\\"\\n  /* IDB_OPEN */\\n  ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\\n  [\\\"idb-get\\\"\\n  /* IDB_GET */\\n  ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\\n  [\\\"idb-set\\\"\\n  /* IDB_WRITE */\\n  ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\\n  [\\\"idb-delete\\\"\\n  /* IDB_DELETE */\\n  ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\\n};\\nconst ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\nclass FirebaseAppImpl {\\n  constructor(options, config, container) {\\n    this._isDeleted = false;\\n    this._options = Object.assign({}, options);\\n    this._config = Object.assign({}, config);\\n    this._name = config.name;\\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\\n    this._container = container;\\n    this.container.addComponent(new _component.Component('app', () => this, \\\"PUBLIC\\\"\\n    /* PUBLIC */\\n    ));\\n  }\\n\\n  get automaticDataCollectionEnabled() {\\n    this.checkDestroyed();\\n    return this._automaticDataCollectionEnabled;\\n  }\\n\\n  set automaticDataCollectionEnabled(val) {\\n    this.checkDestroyed();\\n    this._automaticDataCollectionEnabled = val;\\n  }\\n\\n  get name() {\\n    this.checkDestroyed();\\n    return this._name;\\n  }\\n\\n  get options() {\\n    this.checkDestroyed();\\n    return this._options;\\n  }\\n\\n  get config() {\\n    this.checkDestroyed();\\n    return this._config;\\n  }\\n\\n  get container() {\\n    return this._container;\\n  }\\n\\n  get isDeleted() {\\n    return this._isDeleted;\\n  }\\n\\n  set isDeleted(val) {\\n    this._isDeleted = val;\\n  }\\n  /**\\r\\n   * This function will throw an Error if the App has already been deleted -\\r\\n   * use before performing API actions on the App.\\r\\n   */\\n\\n\\n  checkDestroyed() {\\n    if (this.isDeleted) {\\n      throw ERROR_FACTORY.create(\\\"app-deleted\\\"\\n      /* APP_DELETED */\\n      , {\\n        appName: this._name\\n      });\\n    }\\n  }\\n\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * The current SDK version.\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nconst SDK_VERSION = version;\\nexports.SDK_VERSION = SDK_VERSION;\\n\\nfunction initializeApp(_options, rawConfig = {}) {\\n  let options = _options;\\n\\n  if (typeof rawConfig !== 'object') {\\n    const name = rawConfig;\\n    rawConfig = {\\n      name\\n    };\\n  }\\n\\n  const config = Object.assign({\\n    name: DEFAULT_ENTRY_NAME,\\n    automaticDataCollectionEnabled: false\\n  }, rawConfig);\\n  const name = config.name;\\n\\n  if (typeof name !== 'string' || !name) {\\n    throw ERROR_FACTORY.create(\\\"bad-app-name\\\"\\n    /* BAD_APP_NAME */\\n    , {\\n      appName: String(name)\\n    });\\n  }\\n\\n  options || (options = (0, _util.getDefaultAppConfig)());\\n\\n  if (!options) {\\n    throw ERROR_FACTORY.create(\\\"no-options\\\"\\n    /* NO_OPTIONS */\\n    );\\n  }\\n\\n  const existingApp = _apps.get(name);\\n\\n  if (existingApp) {\\n    // return the existing app if options and config deep equal the ones in the existing app.\\n    if ((0, _util.deepEqual)(options, existingApp.options) && (0, _util.deepEqual)(config, existingApp.config)) {\\n      return existingApp;\\n    } else {\\n      throw ERROR_FACTORY.create(\\\"duplicate-app\\\"\\n      /* DUPLICATE_APP */\\n      , {\\n        appName: name\\n      });\\n    }\\n  }\\n\\n  const container = new _component.ComponentContainer(name);\\n\\n  for (const component of _components.values()) {\\n    container.addComponent(component);\\n  }\\n\\n  const newApp = new FirebaseAppImpl(options, config, container);\\n\\n  _apps.set(name, newApp);\\n\\n  return newApp;\\n}\\n/**\\r\\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\\r\\n *\\r\\n * When called with no arguments, the default app is returned. When an app name\\r\\n * is provided, the app corresponding to that name is returned.\\r\\n *\\r\\n * An exception is thrown if the app being retrieved has not yet been\\r\\n * initialized.\\r\\n *\\r\\n * @example\\r\\n * ```javascript\\r\\n * // Return the default app\\r\\n * const app = getApp();\\r\\n * ```\\r\\n *\\r\\n * @example\\r\\n * ```javascript\\r\\n * // Return a named app\\r\\n * const otherApp = getApp(\\\"otherApp\\\");\\r\\n * ```\\r\\n *\\r\\n * @param name - Optional name of the app to return. If no name is\\r\\n *   provided, the default is `\\\"[DEFAULT]\\\"`.\\r\\n *\\r\\n * @returns The app corresponding to the provided app name.\\r\\n *   If no app name is provided, the default app is returned.\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\\n  const app = _apps.get(name);\\n\\n  if (!app && name === DEFAULT_ENTRY_NAME) {\\n    return initializeApp();\\n  }\\n\\n  if (!app) {\\n    throw ERROR_FACTORY.create(\\\"no-app\\\"\\n    /* NO_APP */\\n    , {\\n      appName: name\\n    });\\n  }\\n\\n  return app;\\n}\\n/**\\r\\n * A (read-only) array of all initialized apps.\\r\\n * @public\\r\\n */\\n\\n\\nfunction getApps() {\\n  return Array.from(_apps.values());\\n}\\n/**\\r\\n * Renders this app unusable and frees the resources of all associated\\r\\n * services.\\r\\n *\\r\\n * @example\\r\\n * ```javascript\\r\\n * deleteApp(app)\\r\\n *   .then(function() {\\r\\n *     console.log(\\\"App deleted successfully\\\");\\r\\n *   })\\r\\n *   .catch(function(error) {\\r\\n *     console.log(\\\"Error deleting app:\\\", error);\\r\\n *   });\\r\\n * ```\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nasync function deleteApp(app) {\\n  const name = app.name;\\n\\n  if (_apps.has(name)) {\\n    _apps.delete(name);\\n\\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\\n    app.isDeleted = true;\\n  }\\n}\\n/**\\r\\n * Registers a library's name and version for platform logging purposes.\\r\\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\\r\\n * @param version - Current version of that library.\\r\\n * @param variant - Bundle variant, e.g., node, rn, etc.\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nfunction registerVersion(libraryKeyOrName, version, variant) {\\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\\n  // a good whitelist system.\\n\\n\\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\\n\\n  if (variant) {\\n    library += `-${variant}`;\\n  }\\n\\n  const libraryMismatch = library.match(/\\\\s|\\\\//);\\n  const versionMismatch = version.match(/\\\\s|\\\\//);\\n\\n  if (libraryMismatch || versionMismatch) {\\n    const warning = [`Unable to register library \\\"${library}\\\" with version \\\"${version}\\\":`];\\n\\n    if (libraryMismatch) {\\n      warning.push(`library name \\\"${library}\\\" contains illegal characters (whitespace or \\\"/\\\")`);\\n    }\\n\\n    if (libraryMismatch && versionMismatch) {\\n      warning.push('and');\\n    }\\n\\n    if (versionMismatch) {\\n      warning.push(`version name \\\"${version}\\\" contains illegal characters (whitespace or \\\"/\\\")`);\\n    }\\n\\n    logger.warn(warning.join(' '));\\n    return;\\n  }\\n\\n  _registerComponent(new _component.Component(`${library}-version`, () => ({\\n    library,\\n    version\\n  }), \\\"VERSION\\\"\\n  /* VERSION */\\n  ));\\n}\\n/**\\r\\n * Sets log handler for all Firebase SDKs.\\r\\n * @param logCallback - An optional custom log handler that executes user code whenever\\r\\n * the Firebase SDK makes a logging call.\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nfunction onLog(logCallback, options) {\\n  if (logCallback !== null && typeof logCallback !== 'function') {\\n    throw ERROR_FACTORY.create(\\\"invalid-log-argument\\\"\\n    /* INVALID_LOG_ARGUMENT */\\n    );\\n  }\\n\\n  (0, _logger.setUserLogHandler)(logCallback, options);\\n}\\n/**\\r\\n * Sets log level for all Firebase SDKs.\\r\\n *\\r\\n * All of the log types above the current log level are captured (i.e. if\\r\\n * you set the log level to `info`, errors are logged, but `debug` and\\r\\n * `verbose` logs are not).\\r\\n *\\r\\n * @public\\r\\n */\\n\\n\\nfunction setLogLevel(logLevel) {\\n  (0, _logger.setLogLevel)(logLevel);\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2021 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n\\nconst DB_NAME = 'firebase-heartbeat-database';\\nconst DB_VERSION = 1;\\nconst STORE_NAME = 'firebase-heartbeat-store';\\nlet dbPromise = null;\\n\\nfunction getDbPromise() {\\n  if (!dbPromise) {\\n    dbPromise = (0, _idb.openDB)(DB_NAME, DB_VERSION, {\\n      upgrade: (db, oldVersion) => {\\n        // We don't use 'break' in this switch statement, the fall-through\\n        // behavior is what we want, because if there are multiple versions between\\n        // the old version and the current version, we want ALL the migrations\\n        // that correspond to those versions to run, not only the last one.\\n        // eslint-disable-next-line default-case\\n        switch (oldVersion) {\\n          case 0:\\n            db.createObjectStore(STORE_NAME);\\n        }\\n      }\\n    }).catch(e => {\\n      throw ERROR_FACTORY.create(\\\"idb-open\\\"\\n      /* IDB_OPEN */\\n      , {\\n        originalErrorMessage: e.message\\n      });\\n    });\\n  }\\n\\n  return dbPromise;\\n}\\n\\nasync function readHeartbeatsFromIndexedDB(app) {\\n  var _a;\\n\\n  try {\\n    const db = await getDbPromise();\\n    return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\\n  } catch (e) {\\n    if (e instanceof _util.FirebaseError) {\\n      logger.warn(e.message);\\n    } else {\\n      const idbGetError = ERROR_FACTORY.create(\\\"idb-get\\\"\\n      /* IDB_GET */\\n      , {\\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\\n      });\\n      logger.warn(idbGetError.message);\\n    }\\n  }\\n}\\n\\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\\n  var _a;\\n\\n  try {\\n    const db = await getDbPromise();\\n    const tx = db.transaction(STORE_NAME, 'readwrite');\\n    const objectStore = tx.objectStore(STORE_NAME);\\n    await objectStore.put(heartbeatObject, computeKey(app));\\n    return tx.done;\\n  } catch (e) {\\n    if (e instanceof _util.FirebaseError) {\\n      logger.warn(e.message);\\n    } else {\\n      const idbGetError = ERROR_FACTORY.create(\\\"idb-set\\\"\\n      /* IDB_WRITE */\\n      , {\\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\\n      });\\n      logger.warn(idbGetError.message);\\n    }\\n  }\\n}\\n\\nfunction computeKey(app) {\\n  return `${app.name}!${app.options.appId}`;\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2021 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n\\nconst MAX_HEADER_BYTES = 1024; // 30 days\\n\\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\\n\\nclass HeartbeatServiceImpl {\\n  constructor(container) {\\n    this.container = container;\\n    /**\\r\\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\\r\\n     * the header string.\\r\\n     * Stores one record per date. This will be consolidated into the standard\\r\\n     * format of one record per user agent string before being sent as a header.\\r\\n     * Populated from indexedDB when the controller is instantiated and should\\r\\n     * be kept in sync with indexedDB.\\r\\n     * Leave public for easier testing.\\r\\n     */\\n\\n    this._heartbeatsCache = null;\\n    const app = this.container.getProvider('app').getImmediate();\\n    this._storage = new HeartbeatStorageImpl(app);\\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\\n      this._heartbeatsCache = result;\\n      return result;\\n    });\\n  }\\n  /**\\r\\n   * Called to report a heartbeat. The function will generate\\r\\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\\r\\n   * to IndexedDB.\\r\\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\\r\\n   * already logged, subsequent calls to this function in the same day will be ignored.\\r\\n   */\\n\\n\\n  async triggerHeartbeat() {\\n    const platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \\\"Firebase user agent\\\" string from the platform logger\\n    // service, not the browser user agent.\\n\\n    const agent = platformLogger.getPlatformInfoString();\\n    const date = getUTCDateString();\\n\\n    if (this._heartbeatsCache === null) {\\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\\n    } // Do not store a heartbeat if one is already stored for this day\\n    // or if a header has already been sent today.\\n\\n\\n    if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\\n      return;\\n    } else {\\n      // There is no entry for this date. Create one.\\n      this._heartbeatsCache.heartbeats.push({\\n        date,\\n        agent\\n      });\\n    } // Remove entries older than 30 days.\\n\\n\\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\\n      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\\n      const now = Date.now();\\n      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\\n    });\\n    return this._storage.overwrite(this._heartbeatsCache);\\n  }\\n  /**\\r\\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\\r\\n   * It also clears all heartbeats from memory as well as in IndexedDB.\\r\\n   *\\r\\n   * NOTE: Consuming product SDKs should not send the header if this method\\r\\n   * returns an empty string.\\r\\n   */\\n\\n\\n  async getHeartbeatsHeader() {\\n    if (this._heartbeatsCache === null) {\\n      await this._heartbeatsCachePromise;\\n    } // If it's still null or the array is empty, there is no data to send.\\n\\n\\n    if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {\\n      return '';\\n    }\\n\\n    const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\\n\\n    const {\\n      heartbeatsToSend,\\n      unsentEntries\\n    } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\\n    const headerString = (0, _util.base64urlEncodeWithoutPadding)(JSON.stringify({\\n      version: 2,\\n      heartbeats: heartbeatsToSend\\n    })); // Store last sent date to prevent another being logged/sent for the same day.\\n\\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\\n\\n    if (unsentEntries.length > 0) {\\n      // Store any unsent entries if they exist.\\n      this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\\n      // since the cache isn't empty and this will be called again on the next request,\\n      // and is probably safest if we await it.\\n\\n      await this._storage.overwrite(this._heartbeatsCache);\\n    } else {\\n      this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\\n\\n      void this._storage.overwrite(this._heartbeatsCache);\\n    }\\n\\n    return headerString;\\n  }\\n\\n}\\n\\nfunction getUTCDateString() {\\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\\n\\n  return today.toISOString().substring(0, 10);\\n}\\n\\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\\n  // Heartbeats grouped by user agent in the standard format to be sent in\\n  // the header.\\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\\n\\n  let unsentEntries = heartbeatsCache.slice();\\n\\n  for (const singleDateHeartbeat of heartbeatsCache) {\\n    // Look for an existing entry with the same user agent.\\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\\n\\n    if (!heartbeatEntry) {\\n      // If no entry for this user agent exists, create one.\\n      heartbeatsToSend.push({\\n        agent: singleDateHeartbeat.agent,\\n        dates: [singleDateHeartbeat.date]\\n      });\\n\\n      if (countBytes(heartbeatsToSend) > maxSize) {\\n        // If the header would exceed max size, remove the added heartbeat\\n        // entry and stop adding to the header.\\n        heartbeatsToSend.pop();\\n        break;\\n      }\\n    } else {\\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\\n      // and stop adding to the header.\\n\\n      if (countBytes(heartbeatsToSend) > maxSize) {\\n        heartbeatEntry.dates.pop();\\n        break;\\n      }\\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\\n    // quota and the loop breaks early.)\\n\\n\\n    unsentEntries = unsentEntries.slice(1);\\n  }\\n\\n  return {\\n    heartbeatsToSend,\\n    unsentEntries\\n  };\\n}\\n\\nclass HeartbeatStorageImpl {\\n  constructor(app) {\\n    this.app = app;\\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\\n  }\\n\\n  async runIndexedDBEnvironmentCheck() {\\n    if (!(0, _util.isIndexedDBAvailable)()) {\\n      return false;\\n    } else {\\n      return (0, _util.validateIndexedDBOpenable)().then(() => true).catch(() => false);\\n    }\\n  }\\n  /**\\r\\n   * Read all heartbeats.\\r\\n   */\\n\\n\\n  async read() {\\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\\n\\n    if (!canUseIndexedDB) {\\n      return {\\n        heartbeats: []\\n      };\\n    } else {\\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\\n      return idbHeartbeatObject || {\\n        heartbeats: []\\n      };\\n    }\\n  } // overwrite the storage with the provided heartbeats\\n\\n\\n  async overwrite(heartbeatsObject) {\\n    var _a;\\n\\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\\n\\n    if (!canUseIndexedDB) {\\n      return;\\n    } else {\\n      const existingHeartbeatsObject = await this.read();\\n      return writeHeartbeatsToIndexedDB(this.app, {\\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\\n        heartbeats: heartbeatsObject.heartbeats\\n      });\\n    }\\n  } // add heartbeats\\n\\n\\n  async add(heartbeatsObject) {\\n    var _a;\\n\\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\\n\\n    if (!canUseIndexedDB) {\\n      return;\\n    } else {\\n      const existingHeartbeatsObject = await this.read();\\n      return writeHeartbeatsToIndexedDB(this.app, {\\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\\n      });\\n    }\\n  }\\n\\n}\\n/**\\r\\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\\r\\n * in a platform logging header JSON object, stringified, and converted\\r\\n * to base 64.\\r\\n */\\n\\n\\nfunction countBytes(heartbeatsCache) {\\n  // base64 has a restricted set of characters, all of which should be 1 byte.\\n  return (0, _util.base64urlEncodeWithoutPadding)( // heartbeatsCache wrapper properties\\n  JSON.stringify({\\n    version: 2,\\n    heartbeats: heartbeatsCache\\n  })).length;\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n\\nfunction registerCoreComponents(variant) {\\n  _registerComponent(new _component.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \\\"PRIVATE\\\"\\n  /* PRIVATE */\\n  ));\\n\\n  _registerComponent(new _component.Component('heartbeat', container => new HeartbeatServiceImpl(container), \\\"PRIVATE\\\"\\n  /* PRIVATE */\\n  )); // Register `app` package.\\n\\n\\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\\n\\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\\n\\n  registerVersion('fire-js', '');\\n}\\n/**\\r\\n * Firebase App\\r\\n *\\r\\n * @remarks This package coordinates the communication between the different Firebase components\\r\\n * @packageDocumentation\\r\\n */\\n\\n\\nregisterCoreComponents('');\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_addComponent\",\"app\",\"component\",\"container\",\"addComponent\",\"e\",\"logger\",\"debug\",\"name\",\"_registerComponent\",\"componentName\",\"_components\",\"has\",\"set\",\"_apps\",\"values\",\"_getProvider\",\"heartbeatController\",\"getProvider\",\"getImmediate\",\"optional\",\"triggerHeartbeat\",\"initializeApp\",\"_options\",\"rawConfig\",\"config\",\"Object\",\"assign\",\"DEFAULT_ENTRY_NAME\",\"automaticDataCollectionEnabled\",\"ERROR_FACTORY\",\"create\",\"appName\",\"String\",\"options\",\"_util\",\"getDefaultAppConfig\",\"existingApp\",\"get\",\"deepEqual\",\"_component\",\"ComponentContainer\",\"newApp\",\"FirebaseAppImpl\",\"registerVersion\",\"libraryKeyOrName\",\"version\",\"variant\",\"_a\",\"library\",\"PLATFORM_LOG_STRING\",\"libraryMismatch\",\"match\",\"versionMismatch\",\"warning\",\"push\",\"warn\",\"join\",\"Component\",\"getDbPromise\",\"dbPromise\",\"_idb\",\"openDB\",\"DB_NAME\",\"DB_VERSION\",\"upgrade\",\"db\",\"oldVersion\",\"createObjectStore\",\"STORE_NAME\",\"catch\",\"originalErrorMessage\",\"message\",\"readHeartbeatsFromIndexedDB\",\"transaction\",\"objectStore\",\"appId\",\"FirebaseError\",\"idbGetError\",\"writeHeartbeatsToIndexedDB\",\"heartbeatObject\",\"tx\",\"put\",\"done\",\"extractHeartbeatsForHeader\",\"heartbeatsCache\",\"maxSize\",\"MAX_HEADER_BYTES\",\"heartbeatsToSend\",\"unsentEntries\",\"slice\",\"singleDateHeartbeat\",\"heartbeatEntry\",\"find\",\"hb\",\"agent\",\"dates\",\"date\",\"countBytes\",\"pop\",\"base64urlEncodeWithoutPadding\",\"JSON\",\"stringify\",\"heartbeats\",\"length\",\"defineProperty\",\"value\",\"_addOrOverwriteComponent\",\"addOrOverwriteComponent\",\"_clearComponents\",\"clear\",\"_removeServiceInstance\",\"instanceIdentifier\",\"clearInstance\",\"deleteApp\",\"delete\",\"Promise\",\"all\",\"getProviders\",\"map\",\"provider\",\"isDeleted\",\"getApp\",\"getApps\",\"Array\",\"from\",\"onLog\",\"logCallback\",\"_logger\",\"setUserLogHandler\",\"setLogLevel\",\"logLevel\",\"enumerable\",\"_DEFAULT_ENTRY_NAME\",\"SDK_VERSION\",\"PlatformLoggerServiceImpl\",\"constructor\",\"getPlatformInfoString\",\"providers\",\"getComponent\",\"type\",\"service\",\"filter\",\"logString\",\"Logger\",\"name$o\",\"name$n\",\"name$l\",\"name$m\",\"name$j\",\"name$k\",\"name$i\",\"name$h\",\"name$g\",\"name$f\",\"name$e\",\"name$d\",\"name$c\",\"name$b\",\"name$a\",\"name$9\",\"name$8\",\"name$7\",\"name$6\",\"name$5\",\"name$4\",\"name$3\",\"name$2\",\"name$1\",\"Map\",\"ErrorFactory\",\"ERRORS\",\"_isDeleted\",\"_config\",\"_name\",\"_automaticDataCollectionEnabled\",\"_container\",\"checkDestroyed\",\"val\",\"HeartbeatServiceImpl\",\"_heartbeatsCache\",\"_storage\",\"HeartbeatStorageImpl\",\"_heartbeatsCachePromise\",\"read\",\"then\",\"result\",\"platformLogger\",\"toISOString\",\"today\",\"Date\",\"substring\",\"lastSentHeartbeatDate\",\"some\",\"hbTimestamp\",\"valueOf\",\"STORED_HEARTBEAT_RETENTION_MAX_MILLIS\",\"now\",\"overwrite\",\"getHeartbeatsHeader\",\"headerString\",\"_canUseIndexedDBPromise\",\"runIndexedDBEnvironmentCheck\",\"isIndexedDBAvailable\",\"validateIndexedDBOpenable\",\"canUseIndexedDB\",\"idbHeartbeatObject\",\"heartbeatsObject\",\"existingHeartbeatsObject\",\"add\",\"registerCoreComponents\",\"version$1\"]\n}\n"]