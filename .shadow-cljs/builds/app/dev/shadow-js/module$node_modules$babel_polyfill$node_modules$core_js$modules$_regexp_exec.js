["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/_regexp-exec.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec=function(global,require,module,exports){var regexpFlags=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_flags\"),nativeExec=RegExp.prototype.exec,nativeReplace=String.prototype.replace;global=nativeExec;var UPDATES_LAST_INDEX_WRONG=function(){var re1=/a/,re2=/b*/g;nativeExec.call(re1,\"a\");nativeExec.call(re2,\"a\");return 0!==re1.lastIndex||0!==re2.lastIndex}(),NPCG_INCLUDED=void 0!==\n/()??/.exec(\"\")[1];if(UPDATES_LAST_INDEX_WRONG||NPCG_INCLUDED)global=function(str){var lastIndex,reCopy,i;NPCG_INCLUDED&&(reCopy=new RegExp(\"^\"+this.source+\"$(?!\\\\s)\",regexpFlags.call(this)));UPDATES_LAST_INDEX_WRONG&&(lastIndex=this.lastIndex);var match=nativeExec.call(this,str);UPDATES_LAST_INDEX_WRONG&&match&&(this.lastIndex=this.global?match.index+match[0].length:lastIndex);NPCG_INCLUDED&&match&&1<match.length&&nativeReplace.call(match[0],reCopy,function(){for(i=1;i<arguments.length-2;i++)void 0===\narguments[i]&&(match[i]=void 0)});return match};module.exports=global}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec\"] = function(global,require,module,exports) {\n'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_flags","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1666267695844,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,4EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzI,IAAIC,YAAcH,OAAA,CAAQ,wEAAR,CAAlB,CAEII,WAAaC,MAAOC,CAAAA,SAAUC,CAAAA,IAFlC,CAMIC,cAAgBC,MAAOH,CAAAA,SAAUI,CAAAA,OAEjCC,OAAAA,CAAcP,UAIlB,KAAIQ,yBAA4B,QAAS,EAAG,CAAA,IACtCC,IAAM,GADgC,CAEtCC,IAAM,KACVV,WAAWW,CAAAA,IAAX,CAAgBF,GAAhB,CAAqB,GAArB,CACAT,WAAWW,CAAAA,IAAX,CAAgBD,GAAhB,CAAqB,GAArB,CACA,OAA2B,EAA3B,GAAOD,GAAA,CAAA,SAAP,EAAoD,CAApD,GAAgCC,GAAA,CAAA,SALU,CAAb,EAA/B,CASIE,cAAuCC,IAAAA,EAAvCD;AAAgB,MAAOT,CAAAA,IAAP,CAAY,EAAZ,CAAA,CAAgB,CAAhB,CAIpB,IAFYK,wBAEZ,EAFwCI,aAExC,CACEL,MAAA,CAAcA,QAAa,CAACO,GAAD,CAAM,CAAA,IAE3BC,SAF2B,CAEhBC,MAFgB,CAEDC,CAE1BL,cAAJ,GACEI,MADF,CACW,IAAIf,MAAJ,CAAW,GAAX,CAJFiB,IAIsBC,CAAAA,MAApB,CAA6B,UAA7B,CAAyCpB,WAAYY,CAAAA,IAAZ,CAJ3CO,IAI2C,CAAzC,CADX,CAGIV,yBAAJ,GAA8BO,SAA9B,CANSG,IAMiC,CAAA,SAA1C,CAEA,KAAAE,MAAQpB,UAAWW,CAAAA,IAAX,CARCO,IAQD,CAAoBJ,GAApB,CAEJN,yBAAJ,EAAgCY,KAAhC,GAVSF,IAWP,CAAA,SADF,CAVSA,IAWavB,CAAAA,MAAH,CAAYyB,KAAMC,CAAAA,KAAlB,CAA0BD,KAAA,CAAM,CAAN,CAASE,CAAAA,MAAnC,CAA4CP,SAD/D,CAGIH,cAAJ,EAAqBQ,KAArB,EAA6C,CAA7C,CAA8BA,KAAME,CAAAA,MAApC,EAIElB,aAAcO,CAAAA,IAAd,CAAmBS,KAAA,CAAM,CAAN,CAAnB,CAA6BJ,MAA7B,CAAqC,QAAS,EAAG,CAC/C,IAAKC,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBM,SAAUD,CAAAA,MAA1B,CAAmC,CAAnC,CAAsCL,CAAA,EAAtC,CACuBJ,IAAAA,EAArB;AAAIU,SAAA,CAAUN,CAAV,CAAJ,GAAgCG,KAAA,CAAMH,CAAN,CAAhC,CAA2CJ,IAAAA,EAA3C,CAF6C,CAAjD,CAOF,OAAOO,MAzBwB,CA6BnCvB,OAAOC,CAAAA,OAAP,CAAiBS,MA1DwH;\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/_regexp-exec.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar regexpFlags = require('./_flags');\\n\\nvar nativeExec = RegExp.prototype.exec;\\n// This always refers to the native implementation, because the\\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\\n// which loads this file before patching the method.\\nvar nativeReplace = String.prototype.replace;\\n\\nvar patchedExec = nativeExec;\\n\\nvar LAST_INDEX = 'lastIndex';\\n\\nvar UPDATES_LAST_INDEX_WRONG = (function () {\\n  var re1 = /a/,\\n      re2 = /b*/g;\\n  nativeExec.call(re1, 'a');\\n  nativeExec.call(re2, 'a');\\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\\n})();\\n\\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\\n\\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\\n\\nif (PATCH) {\\n  patchedExec = function exec(str) {\\n    var re = this;\\n    var lastIndex, reCopy, match, i;\\n\\n    if (NPCG_INCLUDED) {\\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\\\\\s)', regexpFlags.call(re));\\n    }\\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\\n\\n    match = nativeExec.call(re, str);\\n\\n    if (UPDATES_LAST_INDEX_WRONG && match) {\\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\\n    }\\n    if (NPCG_INCLUDED && match && match.length > 1) {\\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\\n      // eslint-disable-next-line no-loop-func\\n      nativeReplace.call(match[0], reCopy, function () {\\n        for (i = 1; i < arguments.length - 2; i++) {\\n          if (arguments[i] === undefined) match[i] = undefined;\\n        }\\n      });\\n    }\\n\\n    return match;\\n  };\\n}\\n\\nmodule.exports = patchedExec;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"regexpFlags\",\"nativeExec\",\"RegExp\",\"prototype\",\"exec\",\"nativeReplace\",\"String\",\"replace\",\"patchedExec\",\"UPDATES_LAST_INDEX_WRONG\",\"re1\",\"re2\",\"call\",\"NPCG_INCLUDED\",\"undefined\",\"str\",\"lastIndex\",\"reCopy\",\"i\",\"re\",\"source\",\"match\",\"index\",\"length\",\"arguments\"]\n}\n"]