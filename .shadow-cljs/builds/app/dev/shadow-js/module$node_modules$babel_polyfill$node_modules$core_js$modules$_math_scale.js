["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/_math-scale.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_scale=function(global,require,module,exports){module.exports=Math.scale||function(x,inLow,inHigh,outLow,outHigh){return 0===arguments.length||x!=x||inLow!=inLow||inHigh!=inHigh||outLow!=outLow||outHigh!=outHigh?NaN:Infinity===x||-Infinity===x?x:(x-inLow)*(outHigh-outLow)/(inHigh-inLow)+outLow}}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_scale\"] = function(global,require,module,exports) {\n// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1666267695862,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_scale.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,2EAAA,CAAgG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExID,MAAOC,CAAAA,OAAP,CAAiBC,IAAKC,CAAAA,KAAtB,EAA+BA,QAAc,CAACC,CAAD,CAAIC,KAAJ,CAAWC,MAAX,CAAmBC,MAAnB,CAA2BC,OAA3B,CAAoC,CAC/E,MACuB,EADvB,GACEC,SAAUC,CAAAA,MADZ,EAGON,CAHP,EAGYA,CAHZ,EAKOC,KALP,EAKgBA,KALhB,EAOOC,MAPP,EAOiBA,MAPjB,EASOC,MATP,EASiBA,MATjB,EAWOC,OAXP,EAWkBA,OAXlB,CAYSG,GAZT,CAaUC,QAAV,GAAIR,CAAJ,EAA4B,CAACQ,QAA7B,GAAsBR,CAAtB,CAA8CA,CAA9C,EACQA,CADR,CACYC,KADZ,GACsBG,OADtB,CACgCD,MADhC,GAC2CD,MAD3C,CACoDD,KADpD,EAC6DE,MAfkB,CAFuD;\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/_math-scale.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_math_scale\\\"] = function(global,require,module,exports) {\\n// https://rwaldron.github.io/proposal-math-extensions/\\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\\n  if (\\n    arguments.length === 0\\n      // eslint-disable-next-line no-self-compare\\n      || x != x\\n      // eslint-disable-next-line no-self-compare\\n      || inLow != inLow\\n      // eslint-disable-next-line no-self-compare\\n      || inHigh != inHigh\\n      // eslint-disable-next-line no-self-compare\\n      || outLow != outLow\\n      // eslint-disable-next-line no-self-compare\\n      || outHigh != outHigh\\n  ) return NaN;\\n  if (x === Infinity || x === -Infinity) return x;\\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Math\",\"scale\",\"x\",\"inLow\",\"inHigh\",\"outLow\",\"outHigh\",\"arguments\",\"length\",\"NaN\",\"Infinity\"]\n}\n"]