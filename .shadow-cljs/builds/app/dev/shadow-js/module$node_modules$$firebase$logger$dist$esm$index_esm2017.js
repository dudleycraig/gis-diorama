["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"~:js","shadow$provide.module$node_modules$$firebase$logger$dist$esm$index_esm2017=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.setLogLevel=function(level){instances.forEach(inst=>{inst.setLogLevel(level)})};exports.setUserLogHandler=function(logCallback,options){for(const instance$jscomp$0 of instances){let customLogLevel=null;options&&options.level&&(customLogLevel=levelStringToEnum[options.level]);instance$jscomp$0.userLogHandler=null===logCallback?\nnull:(instance,level,...args)=>{const message=args.map(arg=>{if(null==arg)return null;if(\"string\"===typeof arg)return arg;if(\"number\"===typeof arg||\"boolean\"===typeof arg)return arg.toString();if(arg instanceof Error)return arg.message;try{return JSON.stringify(arg)}catch(ignored){return null}}).filter(arg=>arg).join(\" \");level>=(null!==customLogLevel&&void 0!==customLogLevel?customLogLevel:instance.logLevel)&&logCallback({level:LogLevel[level].toLowerCase(),message,args,type:instance.name})}}};exports.Logger=\nexports.LogLevel=void 0;const instances=[];var LogLevel;exports.LogLevel=LogLevel;(function(LogLevel){LogLevel[LogLevel.DEBUG=0]=\"DEBUG\";LogLevel[LogLevel.VERBOSE=1]=\"VERBOSE\";LogLevel[LogLevel.INFO=2]=\"INFO\";LogLevel[LogLevel.WARN=3]=\"WARN\";LogLevel[LogLevel.ERROR=4]=\"ERROR\";LogLevel[LogLevel.SILENT=5]=\"SILENT\"})(LogLevel||(exports.LogLevel=LogLevel={}));const levelStringToEnum={debug:LogLevel.DEBUG,verbose:LogLevel.VERBOSE,info:LogLevel.INFO,warn:LogLevel.WARN,error:LogLevel.ERROR,silent:LogLevel.SILENT},\ndefaultLogLevel=LogLevel.INFO,ConsoleMethod={[LogLevel.DEBUG]:\"log\",[LogLevel.VERBOSE]:\"log\",[LogLevel.INFO]:\"info\",[LogLevel.WARN]:\"warn\",[LogLevel.ERROR]:\"error\"},defaultLogHandler=(instance,logType,...args)=>{if(!(logType<instance.logLevel)){var now=(new Date).toISOString(),method=ConsoleMethod[logType];if(method)console[method](`[${now}]  ${instance.name}:`,...args);else throw Error(`Attempted to log a message with an invalid logType (value: ${logType})`);}};class Logger{constructor(name){this.name=\nname;this._logLevel=defaultLogLevel;this._logHandler=defaultLogHandler;this._userLogHandler=null;instances.push(this)}get logLevel(){return this._logLevel}set logLevel(val){if(!(val in LogLevel))throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);this._logLevel=val}setLogLevel(val){this._logLevel=\"string\"===typeof val?levelStringToEnum[val]:val}get logHandler(){return this._logHandler}set logHandler(val){if(\"function\"!==typeof val)throw new TypeError(\"Value assigned to `logHandler` must be a function\");\nthis._logHandler=val}get userLogHandler(){return this._userLogHandler}set userLogHandler(val){this._userLogHandler=val}debug(...args){this._userLogHandler&&this._userLogHandler(this,LogLevel.DEBUG,...args);this._logHandler(this,LogLevel.DEBUG,...args)}log(...args){this._userLogHandler&&this._userLogHandler(this,LogLevel.VERBOSE,...args);this._logHandler(this,LogLevel.VERBOSE,...args)}info(...args){this._userLogHandler&&this._userLogHandler(this,LogLevel.INFO,...args);this._logHandler(this,LogLevel.INFO,\n...args)}warn(...args){this._userLogHandler&&this._userLogHandler(this,LogLevel.WARN,...args);this._logHandler(this,LogLevel.WARN,...args)}error(...args){this._userLogHandler&&this._userLogHandler(this,LogLevel.ERROR,...args);this._logHandler(this,LogLevel.ERROR,...args)}}exports.Logger=Logger}","~:source","shadow$provide[\"module$node_modules$$firebase$logger$dist$esm$index_esm2017\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLogLevel = setLogLevel;\nexports.setUserLogHandler = setUserLogHandler;\nexports.Logger = exports.LogLevel = void 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A container for all of the Logger instances\r\n */\nconst instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\nexports.LogLevel = LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (exports.LogLevel = LogLevel = {}));\n\nconst levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nconst defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nconst defaultLogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n\n  if (method) {\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\n\nclass Logger {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  constructor(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  get logLevel() {\n    return this._logLevel;\n  }\n\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n\n    this._logLevel = val;\n  } // Workaround for setter/getter having to be the same type.\n\n\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  get logHandler() {\n    return this._logHandler;\n  }\n\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n\n    this._logHandler = val;\n  }\n\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n\n\n  debug(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n\n  log(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n\n  info(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n\n  warn(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n\n  error(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n\n}\n\nexports.Logger = Logger;\n\nfunction setLogLevel(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (instance, level, ...args) => {\n        const message = args.map(arg => {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(arg => arg).join(' ');\n\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["message","userLogHandler","_logLevel","LogLevel","args","__esModule","_logHandler","name","level","value","_userLogHandler","type","setLogLevel","setUserLogHandler","Logger"]],"~:compiled-at",1666337898747,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$logger$dist$esm$index_esm2017.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/logger/dist/esm/index.esm2017.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$logger$dist$esm$index_esm2017\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.setLogLevel = setLogLevel;\\nexports.setUserLogHandler = setUserLogHandler;\\nexports.Logger = exports.LogLevel = void 0;\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2017 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * A container for all of the Logger instances\\r\\n */\\nconst instances = [];\\n/**\\r\\n * The JS SDK supports 5 log levels and also allows a user the ability to\\r\\n * silence the logs altogether.\\r\\n *\\r\\n * The order is a follows:\\r\\n * DEBUG < VERBOSE < INFO < WARN < ERROR\\r\\n *\\r\\n * All of the log types above the current log level will be captured (i.e. if\\r\\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\\r\\n * `VERBOSE` logs will not)\\r\\n */\\n\\nvar LogLevel;\\nexports.LogLevel = LogLevel;\\n\\n(function (LogLevel) {\\n  LogLevel[LogLevel[\\\"DEBUG\\\"] = 0] = \\\"DEBUG\\\";\\n  LogLevel[LogLevel[\\\"VERBOSE\\\"] = 1] = \\\"VERBOSE\\\";\\n  LogLevel[LogLevel[\\\"INFO\\\"] = 2] = \\\"INFO\\\";\\n  LogLevel[LogLevel[\\\"WARN\\\"] = 3] = \\\"WARN\\\";\\n  LogLevel[LogLevel[\\\"ERROR\\\"] = 4] = \\\"ERROR\\\";\\n  LogLevel[LogLevel[\\\"SILENT\\\"] = 5] = \\\"SILENT\\\";\\n})(LogLevel || (exports.LogLevel = LogLevel = {}));\\n\\nconst levelStringToEnum = {\\n  'debug': LogLevel.DEBUG,\\n  'verbose': LogLevel.VERBOSE,\\n  'info': LogLevel.INFO,\\n  'warn': LogLevel.WARN,\\n  'error': LogLevel.ERROR,\\n  'silent': LogLevel.SILENT\\n};\\n/**\\r\\n * The default log level\\r\\n */\\n\\nconst defaultLogLevel = LogLevel.INFO;\\n/**\\r\\n * By default, `console.debug` is not displayed in the developer console (in\\r\\n * chrome). To avoid forcing users to have to opt-in to these logs twice\\r\\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\\r\\n * logs to the `console.log` function.\\r\\n */\\n\\nconst ConsoleMethod = {\\n  [LogLevel.DEBUG]: 'log',\\n  [LogLevel.VERBOSE]: 'log',\\n  [LogLevel.INFO]: 'info',\\n  [LogLevel.WARN]: 'warn',\\n  [LogLevel.ERROR]: 'error'\\n};\\n/**\\r\\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\\r\\n * messages on to their corresponding console counterparts (if the log method\\r\\n * is supported by the current log level)\\r\\n */\\n\\nconst defaultLogHandler = (instance, logType, ...args) => {\\n  if (logType < instance.logLevel) {\\n    return;\\n  }\\n\\n  const now = new Date().toISOString();\\n  const method = ConsoleMethod[logType];\\n\\n  if (method) {\\n    console[method](`[${now}]  ${instance.name}:`, ...args);\\n  } else {\\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\\n  }\\n};\\n\\nclass Logger {\\n  /**\\r\\n   * Gives you an instance of a Logger to capture messages according to\\r\\n   * Firebase's logging scheme.\\r\\n   *\\r\\n   * @param name The name that the logs will be associated with\\r\\n   */\\n  constructor(name) {\\n    this.name = name;\\n    /**\\r\\n     * The log level of the given Logger instance.\\r\\n     */\\n\\n    this._logLevel = defaultLogLevel;\\n    /**\\r\\n     * The main (internal) log handler for the Logger instance.\\r\\n     * Can be set to a new function in internal package code but not by user.\\r\\n     */\\n\\n    this._logHandler = defaultLogHandler;\\n    /**\\r\\n     * The optional, additional, user-defined log handler for the Logger instance.\\r\\n     */\\n\\n    this._userLogHandler = null;\\n    /**\\r\\n     * Capture the current instance for later use\\r\\n     */\\n\\n    instances.push(this);\\n  }\\n\\n  get logLevel() {\\n    return this._logLevel;\\n  }\\n\\n  set logLevel(val) {\\n    if (!(val in LogLevel)) {\\n      throw new TypeError(`Invalid value \\\"${val}\\\" assigned to \\\\`logLevel\\\\``);\\n    }\\n\\n    this._logLevel = val;\\n  } // Workaround for setter/getter having to be the same type.\\n\\n\\n  setLogLevel(val) {\\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\\n  }\\n\\n  get logHandler() {\\n    return this._logHandler;\\n  }\\n\\n  set logHandler(val) {\\n    if (typeof val !== 'function') {\\n      throw new TypeError('Value assigned to `logHandler` must be a function');\\n    }\\n\\n    this._logHandler = val;\\n  }\\n\\n  get userLogHandler() {\\n    return this._userLogHandler;\\n  }\\n\\n  set userLogHandler(val) {\\n    this._userLogHandler = val;\\n  }\\n  /**\\r\\n   * The functions below are all based on the `console` interface\\r\\n   */\\n\\n\\n  debug(...args) {\\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\\n\\n    this._logHandler(this, LogLevel.DEBUG, ...args);\\n  }\\n\\n  log(...args) {\\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\\n\\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\\n  }\\n\\n  info(...args) {\\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\\n\\n    this._logHandler(this, LogLevel.INFO, ...args);\\n  }\\n\\n  warn(...args) {\\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\\n\\n    this._logHandler(this, LogLevel.WARN, ...args);\\n  }\\n\\n  error(...args) {\\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\\n\\n    this._logHandler(this, LogLevel.ERROR, ...args);\\n  }\\n\\n}\\n\\nexports.Logger = Logger;\\n\\nfunction setLogLevel(level) {\\n  instances.forEach(inst => {\\n    inst.setLogLevel(level);\\n  });\\n}\\n\\nfunction setUserLogHandler(logCallback, options) {\\n  for (const instance of instances) {\\n    let customLogLevel = null;\\n\\n    if (options && options.level) {\\n      customLogLevel = levelStringToEnum[options.level];\\n    }\\n\\n    if (logCallback === null) {\\n      instance.userLogHandler = null;\\n    } else {\\n      instance.userLogHandler = (instance, level, ...args) => {\\n        const message = args.map(arg => {\\n          if (arg == null) {\\n            return null;\\n          } else if (typeof arg === 'string') {\\n            return arg;\\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\\n            return arg.toString();\\n          } else if (arg instanceof Error) {\\n            return arg.message;\\n          } else {\\n            try {\\n              return JSON.stringify(arg);\\n            } catch (ignored) {\\n              return null;\\n            }\\n          }\\n        }).filter(arg => arg).join(' ');\\n\\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\\n          logCallback({\\n            level: LogLevel[level].toLowerCase(),\\n            message,\\n            args,\\n            type: instance.name\\n          });\\n        }\\n      };\\n    }\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"setLogLevel\",\"level\",\"instances\",\"forEach\",\"inst\",\"setUserLogHandler\",\"logCallback\",\"options\",\"instance\",\"customLogLevel\",\"levelStringToEnum\",\"userLogHandler\",\"args\",\"instance.userLogHandler\",\"message\",\"map\",\"arg\",\"toString\",\"Error\",\"JSON\",\"stringify\",\"ignored\",\"filter\",\"join\",\"logLevel\",\"LogLevel\",\"toLowerCase\",\"type\",\"name\",\"Logger\",\"DEBUG\",\"VERBOSE\",\"INFO\",\"WARN\",\"ERROR\",\"SILENT\",\"defaultLogLevel\",\"ConsoleMethod\",\"defaultLogHandler\",\"logType\",\"now\",\"toISOString\",\"Date\",\"method\",\"console\",\"constructor\",\"_logLevel\",\"_logHandler\",\"_userLogHandler\",\"push\",\"val\",\"TypeError\",\"debug\",\"log\",\"info\",\"warn\",\"error\"]\n}\n"]