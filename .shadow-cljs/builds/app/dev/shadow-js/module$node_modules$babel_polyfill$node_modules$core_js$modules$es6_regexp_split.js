["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/es6.regexp.split.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$es6_regexp_split=function(global,require,module,exports){var isRegExp=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_is_regexp\"),anObject=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_an_object\"),speciesConstructor=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_species_constructor\"),advanceStringIndex=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_advance_string_index\"),\ntoLength=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_to_length\"),callRegExpExec=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec_abstract\"),regexpExec=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec\");global=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_fails\");var $min=Math.min,$push=[].push,SUPPORTS_Y=!global(function(){RegExp(4294967295,\"y\")});require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_fix_re_wks\")(\"split\",\n2,function(defined,SPLIT,$split,maybeCallNative){var internalSplit=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||1<\".\".split(/()()/).length||\"\".split(/.?/).length?function(separator,limit){var string=String(this);if(void 0===separator&&0===limit)return[];if(!isRegExp(separator))return $split.call(string,separator,limit);var output=[],lastLastIndex=0;limit=void 0===limit?4294967295:limit>>>0;separator=new RegExp(separator.source,\n(separator.ignoreCase?\"i\":\"\")+(separator.multiline?\"m\":\"\")+(separator.unicode?\"u\":\"\")+(separator.sticky?\"y\":\"\")+\"g\");for(var match,lastIndex,lastLength;match=regexpExec.call(separator,string);){lastIndex=separator.lastIndex;if(lastIndex>lastLastIndex&&(output.push(string.slice(lastLastIndex,match.index)),1<match.length&&match.index<string.length&&$push.apply(output,match.slice(1)),lastLength=match[0].length,lastLastIndex=lastIndex,output.length>=limit))break;separator.lastIndex===match.index&&separator.lastIndex++}lastLastIndex===\nstring.length?(lastLength||!separator.test(\"\"))&&output.push(\"\"):output.push(string.slice(lastLastIndex));return output.length>limit?output.slice(0,limit):output}:\"0\".split(void 0,0).length?function(separator,limit){return void 0===separator&&0===limit?[]:$split.call(this,separator,limit)}:$split;return[function(separator,limit){var O=defined(this),splitter=void 0==separator?void 0:separator[SPLIT];return void 0!==splitter?splitter.call(separator,O,limit):internalSplit.call(String(O),separator,limit)},\nfunction(regexp,limit){var res=maybeCallNative(internalSplit,regexp,this,limit,internalSplit!==$split);if(res.done)return res.value;var rx=anObject(regexp);regexp=String(this);var C=speciesConstructor(rx,RegExp);res=rx.unicode;rx=new C(SUPPORTS_Y?rx:\"^(?:\"+rx.source+\")\",(rx.ignoreCase?\"i\":\"\")+(rx.multiline?\"m\":\"\")+(rx.unicode?\"u\":\"\")+(SUPPORTS_Y?\"y\":\"g\"));limit=void 0===limit?4294967295:limit>>>0;if(0===limit)return[];if(0===regexp.length)return null===callRegExpExec(rx,regexp)?[regexp]:[];var p=\n0,q=0;for(C=[];q<regexp.length;){rx.lastIndex=SUPPORTS_Y?q:0;var z=callRegExpExec(rx,SUPPORTS_Y?regexp:regexp.slice(q)),e;if(null===z||(e=$min(toLength(rx.lastIndex+(SUPPORTS_Y?0:q)),regexp.length))===p)q=advanceStringIndex(regexp,q,res);else{C.push(regexp.slice(p,q));if(C.length===limit)return C;for(p=1;p<=z.length-1;p++)if(C.push(z[p]),C.length===limit)return C;q=p=e}}C.push(regexp.slice(p));return C}]})}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$es6_regexp_split\"] = function(global,require,module,exports) {\n'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_is_regexp","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_fails","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec_abstract","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_regexp_exec","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_to_length","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_an_object","~$shadow.js","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_fix_re_wks","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_advance_string_index","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_species_constructor"]],"~:properties",["^5",["lastIndex"]],"~:compiled-at",1666267695847,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$es6_regexp_split.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/es6.regexp.split.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$es6_regexp_split\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar isRegExp = require('./_is-regexp');\\nvar anObject = require('./_an-object');\\nvar speciesConstructor = require('./_species-constructor');\\nvar advanceStringIndex = require('./_advance-string-index');\\nvar toLength = require('./_to-length');\\nvar callRegExpExec = require('./_regexp-exec-abstract');\\nvar regexpExec = require('./_regexp-exec');\\nvar fails = require('./_fails');\\nvar $min = Math.min;\\nvar $push = [].push;\\nvar $SPLIT = 'split';\\nvar LENGTH = 'length';\\nvar LAST_INDEX = 'lastIndex';\\nvar MAX_UINT32 = 0xffffffff;\\n\\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\\n\\n// @@split logic\\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\\n  var internalSplit;\\n  if (\\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\\n    ''[$SPLIT](/.?/)[LENGTH]\\n  ) {\\n    // based on es5-shim implementation, need to rework it\\n    internalSplit = function (separator, limit) {\\n      var string = String(this);\\n      if (separator === undefined && limit === 0) return [];\\n      // If `separator` is not a regex, use native split\\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\\n      var output = [];\\n      var flags = (separator.ignoreCase ? 'i' : '') +\\n                  (separator.multiline ? 'm' : '') +\\n                  (separator.unicode ? 'u' : '') +\\n                  (separator.sticky ? 'y' : '');\\n      var lastLastIndex = 0;\\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\\n      // Make `global` and avoid `lastIndex` issues by working with a copy\\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\\n      var match, lastIndex, lastLength;\\n      while (match = regexpExec.call(separatorCopy, string)) {\\n        lastIndex = separatorCopy[LAST_INDEX];\\n        if (lastIndex > lastLastIndex) {\\n          output.push(string.slice(lastLastIndex, match.index));\\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\\n          lastLength = match[0][LENGTH];\\n          lastLastIndex = lastIndex;\\n          if (output[LENGTH] >= splitLimit) break;\\n        }\\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\\n      }\\n      if (lastLastIndex === string[LENGTH]) {\\n        if (lastLength || !separatorCopy.test('')) output.push('');\\n      } else output.push(string.slice(lastLastIndex));\\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\\n    };\\n  // Chakra, V8\\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\\n    internalSplit = function (separator, limit) {\\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\\n    };\\n  } else {\\n    internalSplit = $split;\\n  }\\n\\n  return [\\n    // `String.prototype.split` method\\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\\n    function split(separator, limit) {\\n      var O = defined(this);\\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\\n      return splitter !== undefined\\n        ? splitter.call(separator, O, limit)\\n        : internalSplit.call(String(O), separator, limit);\\n    },\\n    // `RegExp.prototype[@@split]` method\\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\\n    //\\n    // NOTE: This cannot be properly polyfilled in engines that don't support\\n    // the 'y' flag.\\n    function (regexp, limit) {\\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\\n      if (res.done) return res.value;\\n\\n      var rx = anObject(regexp);\\n      var S = String(this);\\n      var C = speciesConstructor(rx, RegExp);\\n\\n      var unicodeMatching = rx.unicode;\\n      var flags = (rx.ignoreCase ? 'i' : '') +\\n                  (rx.multiline ? 'm' : '') +\\n                  (rx.unicode ? 'u' : '') +\\n                  (SUPPORTS_Y ? 'y' : 'g');\\n\\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\\n      // simulate the 'y' flag.\\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\\n      if (lim === 0) return [];\\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\\n      var p = 0;\\n      var q = 0;\\n      var A = [];\\n      while (q < S.length) {\\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\\n        var e;\\n        if (\\n          z === null ||\\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\\n        ) {\\n          q = advanceStringIndex(S, q, unicodeMatching);\\n        } else {\\n          A.push(S.slice(p, q));\\n          if (A.length === lim) return A;\\n          for (var i = 1; i <= z.length - 1; i++) {\\n            A.push(z[i]);\\n            if (A.length === lim) return A;\\n          }\\n          q = p = e;\\n        }\\n      }\\n      A.push(S.slice(p));\\n      return A;\\n    }\\n  ];\\n});\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isRegExp\",\"anObject\",\"speciesConstructor\",\"advanceStringIndex\",\"toLength\",\"callRegExpExec\",\"regexpExec\",\"fails\",\"$min\",\"Math\",\"min\",\"$push\",\"push\",\"SUPPORTS_Y\",\"RegExp\",\"MAX_UINT32\",\"defined\",\"SPLIT\",\"$split\",\"maybeCallNative\",\"internalSplit\",\"separator\",\"limit\",\"string\",\"String\",\"undefined\",\"call\",\"output\",\"lastLastIndex\",\"splitLimit\",\"separatorCopy\",\"source\",\"ignoreCase\",\"multiline\",\"unicode\",\"sticky\",\"match\",\"lastIndex\",\"lastLength\",\"slice\",\"index\",\"apply\",\"test\",\"split\",\"O\",\"splitter\",\"regexp\",\"res\",\"done\",\"value\",\"rx\",\"S\",\"C\",\"unicodeMatching\",\"lim\",\"length\",\"p\",\"q\",\"A\",\"z\",\"e\",\"i\"]\n}\n"]