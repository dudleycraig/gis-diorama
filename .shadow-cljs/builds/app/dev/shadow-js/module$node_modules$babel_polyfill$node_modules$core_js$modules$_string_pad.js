["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/babel-polyfill/node_modules/core-js/modules/_string-pad.js"],"~:js","shadow$provide.module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_pad=function(global,require,module,exports){var toLength=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_to_length\"),repeat=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_repeat\"),defined=require(\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_defined\");module.exports=function(that,maxLength,fillString,left){that=String(defined(that));\nvar stringLength=that.length;fillString=void 0===fillString?\" \":String(fillString);maxLength=toLength(maxLength);if(maxLength<=stringLength||\"\"==fillString)return that;maxLength-=stringLength;stringLength=repeat.call(fillString,Math.ceil(maxLength/fillString.length));stringLength.length>maxLength&&(stringLength=stringLength.slice(0,maxLength));return left?stringLength+that:that+stringLength}}","~:source","shadow$provide[\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_pad\"] = function(global,require,module,exports) {\n// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_repeat","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_defined","~$module$node_modules$babel_polyfill$node_modules$core_js$modules$_to_length","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1666267695858,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_pad.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,2EAAA,CAAgG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExI,IAAIC,SAAWH,OAAA,CAAQ,4EAAR,CAAf,CACII,OAASJ,OAAA,CAAQ,gFAAR,CADb,CAEIK,QAAUL,OAAA,CAAQ,0EAAR,CAEdC,OAAOC,CAAAA,OAAP,CAAiBI,QAAS,CAACC,IAAD,CAAOC,SAAP,CAAkBC,UAAlB,CAA8BC,IAA9B,CAAoC,CACxDC,IAAAA,CAAIC,MAAA,CAAOP,OAAA,CAAQE,IAAR,CAAP,CACR;IAAIM,aAAeF,IAAEG,CAAAA,MACjBC,WAAAA,CAAyBC,IAAAA,EAAf,GAAAP,UAAA,CAA2B,GAA3B,CAAiCG,MAAA,CAAOH,UAAP,CAC3CQ,UAAAA,CAAed,QAAA,CAASK,SAAT,CACnB,IAAIS,SAAJ,EAAoBJ,YAApB,EAA+C,EAA/C,EAAoCE,UAApC,CAAmD,MAAOJ,KAC5CM,UAAVC,EAAyBL,YACzBM,aAAAA,CAAef,MAAOgB,CAAAA,IAAP,CAAYL,UAAZ,CAAqBM,IAAKC,CAAAA,IAAL,CAAUJ,SAAV,CAAoBH,UAAQD,CAAAA,MAA5B,CAArB,CACfK,aAAaL,CAAAA,MAAjB,CAA0BI,SAA1B,GAAmCC,YAAnC,CAAkDA,YAAaI,CAAAA,KAAb,CAAmB,CAAnB,CAAsBL,SAAtB,CAAlD,CACA,OAAOR,KAAA,CAAOS,YAAP,CAAsBR,IAAtB,CAA0BA,IAA1B,CAA8BQ,YATuB,CAN0E;\",\n\"sources\":[\"node_modules/babel-polyfill/node_modules/core-js/modules/_string-pad.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$babel_polyfill$node_modules$core_js$modules$_string_pad\\\"] = function(global,require,module,exports) {\\n// https://github.com/tc39/proposal-string-pad-start-end\\nvar toLength = require('./_to-length');\\nvar repeat = require('./_string-repeat');\\nvar defined = require('./_defined');\\n\\nmodule.exports = function (that, maxLength, fillString, left) {\\n  var S = String(defined(that));\\n  var stringLength = S.length;\\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\\n  var intMaxLength = toLength(maxLength);\\n  if (intMaxLength <= stringLength || fillStr == '') return S;\\n  var fillLen = intMaxLength - stringLength;\\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\\n  return left ? stringFiller + S : S + stringFiller;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"toLength\",\"repeat\",\"defined\",\"module.exports\",\"that\",\"maxLength\",\"fillString\",\"left\",\"S\",\"String\",\"stringLength\",\"length\",\"fillStr\",\"undefined\",\"intMaxLength\",\"fillLen\",\"stringFiller\",\"call\",\"Math\",\"ceil\",\"slice\"]\n}\n"]