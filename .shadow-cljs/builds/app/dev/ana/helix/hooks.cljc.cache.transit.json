["^ ","~:output",["^ ","~:js","goog.provide('helix.hooks');\ngoog.scope(function(){\n  helix.hooks.goog$module$goog$object = goog.module.get('goog.object');\n});\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\nhelix.hooks.raw_use_effect = module$node_modules$react$index.useEffect;\n\nhelix.hooks.raw_use_layout_effect = module$node_modules$react$index.useLayoutEffect;\n\nhelix.hooks.raw_use_memo = module$node_modules$react$index.useMemo;\n\nhelix.hooks.raw_use_callback = module$node_modules$react$index.useCallback;\n\nhelix.hooks.raw_use_imperative_handle = module$node_modules$react$index.useImperativeHandle;\n/**\n * Like `react/useState`, but the update function returned can be used similar\n *   to `swap!`.\n * \n *   Example:\n *   ```\n *   (let [[state set-state] (use-state {:count 0})]\n * ;; ...\n * (set-state update :count inc))\n *   ```\n */\nhelix.hooks.use_state = (function helix$hooks$use_state(initial){\nvar vec__56260 = module$node_modules$react$index.useState(initial);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56260,(0),null);\nvar u = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56260,(1),null);\nvar updater = module$node_modules$react$index.useCallback((function() {\nvar helix$hooks$use_state_$_updater = null;\nvar helix$hooks$use_state_$_updater__1 = (function (x){\nreturn (u.cljs$core$IFn$_invoke$arity$1 ? u.cljs$core$IFn$_invoke$arity$1(x) : u.call(null,x));\n});\nvar helix$hooks$use_state_$_updater__2 = (function() { \nvar G__56434__delegate = function (f,xs){\nreturn helix$hooks$use_state_$_updater.cljs$core$IFn$_invoke$arity$1((function helix$hooks$use_state_$_updater_$_spread_updater(x){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,x,xs);\n}));\n};\nvar G__56434 = function (f,var_args){\nvar xs = null;\nif (arguments.length > 1) {\nvar G__56436__i = 0, G__56436__a = new Array(arguments.length -  1);\nwhile (G__56436__i < G__56436__a.length) {G__56436__a[G__56436__i] = arguments[G__56436__i + 1]; ++G__56436__i;}\n  xs = new cljs.core.IndexedSeq(G__56436__a,0,null);\n} \nreturn G__56434__delegate.call(this,f,xs);};\nG__56434.cljs$lang$maxFixedArity = 1;\nG__56434.cljs$lang$applyTo = (function (arglist__56437){\nvar f = cljs.core.first(arglist__56437);\nvar xs = cljs.core.rest(arglist__56437);\nreturn G__56434__delegate(f,xs);\n});\nG__56434.cljs$core$IFn$_invoke$arity$variadic = G__56434__delegate;\nreturn G__56434;\n})()\n;\nhelix$hooks$use_state_$_updater = function(f,var_args){\nvar xs = var_args;\nswitch(arguments.length){\ncase 1:\nreturn helix$hooks$use_state_$_updater__1.call(this,f);\ndefault:\nvar G__56438 = null;\nif (arguments.length > 1) {\nvar G__56440__i = 0, G__56440__a = new Array(arguments.length -  1);\nwhile (G__56440__i < G__56440__a.length) {G__56440__a[G__56440__i] = arguments[G__56440__i + 1]; ++G__56440__i;}\nG__56438 = new cljs.core.IndexedSeq(G__56440__a,0,null);\n}\nreturn helix$hooks$use_state_$_updater__2.cljs$core$IFn$_invoke$arity$variadic(f, G__56438);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nhelix$hooks$use_state_$_updater.cljs$lang$maxFixedArity = 1;\nhelix$hooks$use_state_$_updater.cljs$lang$applyTo = helix$hooks$use_state_$_updater__2.cljs$lang$applyTo;\nhelix$hooks$use_state_$_updater.cljs$core$IFn$_invoke$arity$1 = helix$hooks$use_state_$_updater__1;\nhelix$hooks$use_state_$_updater.cljs$core$IFn$_invoke$arity$variadic = helix$hooks$use_state_$_updater__2.cljs$core$IFn$_invoke$arity$variadic;\nreturn helix$hooks$use_state_$_updater;\n})()\n,[]);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v,updater], null);\n});\n/**\n * Like react/useRef. Supports accessing the \"current\" property via\n *   dereference (@) and updating the \"current\" property via `reset!` and\n *   `swap!`\n */\nhelix.hooks.use_ref = (function helix$hooks$use_ref(x){\nvar ref = module$node_modules$react$index.useRef(null);\nif((ref.current == null)){\n(ref.current = (function (){var x56272 = ({\"current\": x});\n(x56272.cljs$core$IDeref$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x56272.cljs$core$IDeref$_deref$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn this$__$1.current;\n}));\n\n(x56272.cljs$core$IReset$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x56272.cljs$core$IReset$_reset_BANG_$arity$2 = (function (this$,v){\nvar this$__$1 = this;\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",v);\n}));\n\n(x56272.cljs$core$ISwap$ = cljs.core.PROTOCOL_SENTINEL);\n\n(x56272.cljs$core$ISwap$_swap_BANG_$arity$2 = (function (this$,f){\nvar this$__$1 = this;\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__56282 = this$__$1.current;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__56282) : f.call(null,G__56282));\n})());\n}));\n\n(x56272.cljs$core$ISwap$_swap_BANG_$arity$3 = (function (this$,f,a){\nvar this$__$1 = this;\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__56288 = this$__$1.current;\nvar G__56289 = a;\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__56288,G__56289) : f.call(null,G__56288,G__56289));\n})());\n}));\n\n(x56272.cljs$core$ISwap$_swap_BANG_$arity$4 = (function (this$,f,a,b){\nvar this$__$1 = this;\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",(function (){var G__56295 = this$__$1.current;\nvar G__56296 = a;\nvar G__56297 = b;\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__56295,G__56296,G__56297) : f.call(null,G__56295,G__56296,G__56297));\n})());\n}));\n\n(x56272.cljs$core$ISwap$_swap_BANG_$arity$5 = (function (this$,f,a,b,xs){\nvar this$__$1 = this;\nreturn helix.hooks.goog$module$goog$object.set(this$__$1,\"current\",cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,this$__$1.current,a,b,xs));\n}));\n\nreturn x56272;\n})());\n} else {\n}\n\nreturn ref.current;\n});\n/**\n * Just react/useReducer.\n */\nhelix.hooks.use_reducer = (function helix$hooks$use_reducer(var_args){\nvar G__56308 = arguments.length;\nswitch (G__56308) {\ncase 2:\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$2 = (function (reducer,init_state){\nreturn helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3(reducer,init_state,undefined);\n}));\n\n(helix.hooks.use_reducer.cljs$core$IFn$_invoke$arity$3 = (function (reducer,init_state,init){\nreturn module$node_modules$react$index.useReducer(module$node_modules$react$index.useMemo((function (){\nif((((!(cljs.core.fn_QMARK_(reducer)))) && (cljs.core.ifn_QMARK_(reducer)))){\nreturn (function helix$hooks$wrap_ifn(state,action){\nreturn (reducer.cljs$core$IFn$_invoke$arity$2 ? reducer.cljs$core$IFn$_invoke$arity$2(state,action) : reducer.call(null,state,action));\n});\n} else {\nreturn reducer;\n}\n}),[reducer]),init_state,init);\n}));\n\n(helix.hooks.use_reducer.cljs$lang$maxFixedArity = 3);\n\n/**\n * Just react/useContext\n */\nhelix.hooks.use_context = module$node_modules$react$index.useContext;\nhelix.hooks.wrap_fx = (function helix$hooks$wrap_fx(f){\nreturn (function helix$hooks$wrap_fx_$_wrap_fx_return(){\nvar x = (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\nif(cljs.core.fn_QMARK_(x)){\nreturn x;\n} else {\nreturn undefined;\n}\n});\n});\nhelix.hooks.simple_body_QMARK_ = (function helix$hooks$simple_body_QMARK_(body){\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(body),(1))) && ((cljs.core.first(body) instanceof cljs.core.Symbol)));\n});\nhelix.hooks.determine_deps = (function helix$hooks$determine_deps(deps){\nvar G__56321 = deps;\nvar G__56321__$1 = (((G__56321 instanceof cljs.core.Keyword))?G__56321.fqn:null);\nswitch (G__56321__$1) {\ncase \"once\":\nreturn [];\n\nbreak;\ncase \"always\":\nreturn undefined;\n\nbreak;\ncase \"auto-deps\":\nthrow (new Error(\"Cannot use :auto-deps outside of macro.\"));\n\nbreak;\ndefault:\nreturn cljs.core.to_array(deps);\n\n}\n});\n/**\n * Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\n */\nhelix.hooks.use_effect_STAR_ = (function helix$hooks$use_effect_STAR_(var_args){\nvar G__56323 = arguments.length;\nswitch (G__56323) {\ncase 1:\nreturn helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn module$node_modules$react$index.useEffect(helix.hooks.wrap_fx(f));\n}));\n\n(helix.hooks.use_effect_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\nthrow (new Error(\"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"));\n} else {\n}\n} else {\n}\n\nreturn module$node_modules$react$index.useEffect(helix.hooks.wrap_fx(f),cljs.core.to_array(deps));\n}));\n\n(helix.hooks.use_effect_STAR_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like `use-effect*` but instead calls react/useLayoutEffect.\n */\nhelix.hooks.use_layout_effect_STAR_ = (function helix$hooks$use_layout_effect_STAR_(var_args){\nvar G__56335 = arguments.length;\nswitch (G__56335) {\ncase 1:\nreturn helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn module$node_modules$react$index.useLayoutEffect(helix.hooks.wrap_fx(f));\n}));\n\n(helix.hooks.use_layout_effect_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\nthrow (new Error(\"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"));\n} else {\n}\n} else {\n}\n\nreturn module$node_modules$react$index.useLayoutEffect(helix.hooks.wrap_fx(f),cljs.core.to_array(deps));\n}));\n\n(helix.hooks.use_layout_effect_STAR_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n *   `deps`.\n */\nhelix.hooks.use_memo_STAR_ = (function helix$hooks$use_memo_STAR_(var_args){\nvar G__56341 = arguments.length;\nswitch (G__56341) {\ncase 1:\nreturn helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn module$node_modules$react$index.useMemo(f);\n}));\n\n(helix.hooks.use_memo_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\nthrow (new Error(\"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"));\n} else {\n}\n} else {\n}\n\nreturn module$node_modules$react$index.useMemo(f,cljs.core.to_array(deps));\n}));\n\n(helix.hooks.use_memo_STAR_.cljs$lang$maxFixedArity = 2);\n\n/**\n * `f` is a function which will be passed to react/useCallback.  See\n *   namespace doc for `deps`.\n */\nhelix.hooks.use_callback_STAR_ = (function helix$hooks$use_callback_STAR_(var_args){\nvar G__56349 = arguments.length;\nswitch (G__56349) {\ncase 1:\nreturn helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn module$node_modules$react$index.useCallback(f);\n}));\n\n(helix.hooks.use_callback_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (f,deps){\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\nthrow (new Error(\"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"));\n} else {\n}\n} else {\n}\n\nreturn module$node_modules$react$index.useCallback(f,cljs.core.to_array(deps));\n}));\n\n(helix.hooks.use_callback_STAR_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n *   See namespace doc for `deps`\n */\nhelix.hooks.use_imperative_handle_STAR_ = (function helix$hooks$use_imperative_handle_STAR_(var_args){\nvar G__56356 = arguments.length;\nswitch (G__56356) {\ncase 2:\nreturn helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (ref,f){\nreturn module$node_modules$react$index.useImperativeHandle(ref,f);\n}));\n\n(helix.hooks.use_imperative_handle_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (ref,f,deps){\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(deps,new cljs.core.Keyword(null,\"auto-deps\",\"auto-deps\",-2124919365))){\nthrow (new Error(\"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"));\n} else {\n}\n} else {\n}\n\nreturn module$node_modules$react$index.useImperativeHandle(ref,f,cljs.core.to_array(deps));\n}));\n\n(helix.hooks.use_imperative_handle_STAR_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Just react/useDebugValue\n */\nhelix.hooks.use_debug_value = module$node_modules$react$index.useDebugValue;\n/**\n * Hook used for safely managing subscriptions, respecting Clojure equality.\n * \n *   In order to avoid removing and re-adding subscriptions each time this hook is\n *   called, the parameters passed to this hook should be memoized in some way–\n *   either by wrapping the entire params object with `use-memo` or by wrapping the\n *   individual callbacks with `use-callback`.\n */\nhelix.hooks.use_subscription = (function helix$hooks$use_subscription(p__56362){\nvar map__56363 = p__56362;\nvar map__56363__$1 = cljs.core.__destructure_map(map__56363);\nvar get_current_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56363__$1,new cljs.core.Keyword(null,\"get-current-value\",\"get-current-value\",-1706578691));\nvar subscribe = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56363__$1,new cljs.core.Keyword(null,\"subscribe\",\"subscribe\",416253756));\nvar vec__56367 = module$node_modules$react$index.useState((function (){\nreturn ({\"get-current-value\": get_current_value, \"subscribe\": subscribe, \"value\": (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null))});\n}));\nvar state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56367,(0),null);\nvar set_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56367,(1),null);\nmodule$node_modules$react$index.useEffect((function (){\nvar did_unsubscribe = ({\"value\": false});\nvar check_for_updates = (function helix$hooks$use_subscription_$_check_for_updates(){\nif(cljs.core.not(helix.hooks.goog$module$goog$object.get(did_unsubscribe,\"value\"))){\nvar value = (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null));\nvar G__56380 = (function (prev){\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(get_current_value,helix.hooks.goog$module$goog$object.get(prev,\"get-current-value\"))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(subscribe,helix.hooks.goog$module$goog$object.get(prev,\"subscribe\"))))){\nreturn prev;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(value,helix.hooks.goog$module$goog$object.get(prev,\"value\"))){\nreturn prev;\n} else {\nreturn ({\"get-current-value\": helix.hooks.goog$module$goog$object.get(prev,\"get-current-value\"), \"subscribe\": helix.hooks.goog$module$goog$object.get(prev,\"subscribe\"), \"value\": value});\n\n}\n}\n});\nreturn (set_state.cljs$core$IFn$_invoke$arity$1 ? set_state.cljs$core$IFn$_invoke$arity$1(G__56380) : set_state.call(null,G__56380));\n} else {\nreturn null;\n}\n});\nvar unsubscribe = (subscribe.cljs$core$IFn$_invoke$arity$1 ? subscribe.cljs$core$IFn$_invoke$arity$1(check_for_updates) : subscribe.call(null,check_for_updates));\ncheck_for_updates();\n\nreturn (function (){\nhelix.hooks.goog$module$goog$object.set(did_unsubscribe,\"value\",true);\n\nreturn (unsubscribe.cljs$core$IFn$_invoke$arity$0 ? unsubscribe.cljs$core$IFn$_invoke$arity$0() : unsubscribe.call(null));\n});\n}),[get_current_value,subscribe]);\n\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(get_current_value,helix.hooks.goog$module$goog$object.get(state,\"get-current-value\"))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(subscribe,helix.hooks.goog$module$goog$object.get(state,\"subscribe\"))))){\nvar value = (get_current_value.cljs$core$IFn$_invoke$arity$0 ? get_current_value.cljs$core$IFn$_invoke$arity$0() : get_current_value.call(null));\nvar G__56404_56473 = ({\"get-current-value\": get_current_value, \"subscribe\": subscribe, \"value\": value});\n(set_state.cljs$core$IFn$_invoke$arity$1 ? set_state.cljs$core$IFn$_invoke$arity$1(G__56404_56473) : set_state.call(null,G__56404_56473));\n\nreturn value;\n} else {\nreturn helix.hooks.goog$module$goog$object.get(state,\"value\");\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.","~:file","helix/hooks.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$use-memo",["^ ","~:ns","~$helix.hooks","~:name","~$helix.hooks/use-memo","^7","helix/hooks.cljc","^9",1,"^8",219,"~:macro",true,"~:style/indent","~:defn","~:arglists",["~#list",[["~$deps","~$&","~$body"]]],"^6","Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function."],"~$use-imperative-handle",["^ ","^H","^I","^J","~$helix.hooks/use-imperative-handle","^7","helix/hooks.cljc","^9",1,"^8",278,"^L",true,"^M","^N","^O",["^P",[["~$ref","^Q","~$&","^R"]]],"^6","Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function."],"~$use-layout-effect",["^ ","^H","^I","^J","~$helix.hooks/use-layout-effect","^7","helix/hooks.cljc","^9",1,"^8",195,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^R"]]],"^6","Like `use-effect` but instead calls react/useLayoutEffect."],"~$use-effect",["^ ","^H","^I","^J","~$helix.hooks/use-effect","^7","helix/hooks.cljc","^9",1,"^8",163,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^R"]]],"^6","Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined."],"~$use-callback",["^ ","^H","^I","^J","~$helix.hooks/use-callback","^7","helix/hooks.cljc","^9",1,"^8",253,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","~$fn-body"]]],"^6","Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function."]],"^J","^I","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index"],"~:op","^H","~:imports",null,"~:requires",["^ ","~$goog.object","^18","~$gobj","^18","~$cljs.core","^1:","~$goog","^1;","^14","^14","~$react","^14"],"~:seen",["^E",["~:require","~:require-macros"]],"~:uses",null,"^1?",["^ ","^I","^I","^1:","^1:"],"~:form",["^P",["~$ns","^I","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.",["^P",["^1>",["react","~:as","^1<"],["^18","^1C","^19"]]],["^P",["^1?",["^I"]]]]],"~:flags",["^ ","^1>",["^E",[]],"^1?",["^E",[]]],"~:js-deps",["^ ","^13",["^ ","^1C","^1<"]],"~:deps",["^1;","^1:","^14","^18"]],"^H","^I","~:resource-id",["~:shadow.build.classpath/resource","helix/hooks.cljc"],"~:compiled-at",1668702810292,"^11",["^ ","^18","^18","^19","^18","^1:","^1:","^1;","^1;","^14","^14","^1<","^14","^I","^I"],"~:resource-name","helix/hooks.cljc","~:warnings",[],"~:source","(ns helix.hooks\n  \"Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.\"\n  #?(:clj (:require [helix.impl.analyzer :as hana])\n     :cljs (:require\n            [\"react\" :as react]\n            [goog.object :as gobj]))\n  #?(:cljs (:require-macros [helix.hooks])))\n\n\n#?(:cljs\n   (do (def raw-use-effect react/useEffect)\n       (def raw-use-layout-effect react/useLayoutEffect)\n       (def raw-use-memo react/useMemo)\n       (def raw-use-callback react/useCallback)\n       (def raw-use-imperative-handle react/useImperativeHandle)))\n\n\n#?(:cljs\n   (defn use-state\n     \"Like `react/useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\"\n     [initial]\n     (let [[v u] (react/useState initial)\n           updater (react/useCallback (fn updater\n                                        ([x] (u x))\n                                        ([f & xs]\n                                         (updater (fn spread-updater [x]\n                                                    (apply f x xs)))))\n                                      ;; `u` is guaranteed to be stable so we elide it\n                                      #js [])]\n       [v updater])))\n\n\n#?(:cljs\n   (defn use-ref\n     \"Like react/useRef. Supports accessing the \\\"current\\\" property via\n     dereference (@) and updating the \\\"current\\\" property via `reset!` and\n     `swap!`\"\n     [x]\n     (let [ref (react/useRef nil)]\n       (when (nil? (.-current ^js ref))\n         (set! (.-current ^js ref)\n               (specify! #js {:current x}\n                 IDeref\n                 (-deref [this]\n                   (.-current ^js this))\n\n                 IReset\n                 (-reset! [this v]\n                   (gobj/set this \"current\" v))\n\n                 ISwap\n                 (-swap!\n                   ([this f]\n                    (gobj/set this \"current\" (f (.-current ^js this))))\n                   ([this f a]\n                    (gobj/set this \"current\" (f (.-current ^js this) a)))\n                   ([this f a b]\n                    (gobj/set this \"current\" (f (.-current ^js this) a b)))\n                   ([this f a b xs]\n                    (gobj/set this \"current\" (apply f (.-current ^js this) a b xs)))))))\n       (.-current ^js ref))))\n\n\n#?(:cljs\n   (defn use-reducer\n     \"Just react/useReducer.\"\n     ([reducer init-state]\n      (use-reducer reducer init-state js/undefined))\n     ([reducer init-state init]\n      (react/useReducer\n       ;; handle ifn, e.g. multi-methods\n       (react/useMemo\n        #(if (and (not (fn? reducer)) (ifn? reducer))\n           (fn wrap-ifn [state action]\n             (reducer state action))\n           reducer)\n        #js [reducer])\n       init-state\n       init))))\n\n\n#?(:cljs\n   (def use-context\n     \"Just react/useContext\"\n     react/useContext))\n\n\n;; React `useEffect` expects either a function or undefined to be returned\n#?(:cljs\n   (defn wrap-fx [f]\n     (fn wrap-fx-return []\n       (let [x (f)]\n         (if (fn? x)\n           x\n           js/undefined)))))\n\n\n(defn simple-body? [body]\n  (and (= (count body) 1) (symbol? (first body))))\n\n\n#?(:clj\n   (defn deps-macro-body [env deps body simple-body-ok? deps->hook-body]\n     (cond\n       ;;\n       ;; Warn on typical errors writing body\n       ;;\n\n       ;; a single symbol\n       (and (= (count body) 1) (symbol? (first body)) (not simple-body-ok?))\n       (do (hana/warn hana/warning-simple-body env {:form body})\n           nil)\n\n\n       ;;\n       ;; Different variations of deps\n       ;;\n\n       ;; deps are passed in as a vector\n       (vector? deps) (deps->hook-body `(cljs.core/array ~@deps)\n                                       body)\n\n       ;; auto deps is passed in\n       (= deps :auto-deps) (deps->hook-body\n                            `(cljs.core/array ~@(hana/resolve-local-vars env body))\n                            body)\n\n       ;; always fire it (don't pass any deps in to hook)\n       (= deps :always) (deps->hook-body body)\n\n       ;; pass an empty array for things that should only run once\n       (= deps :once) (deps->hook-body '(cljs.core/array) body)\n\n       :else (deps->hook-body `(determine-deps ~deps) body)))\n\n   :cljs (defn determine-deps [deps]\n           (case deps\n             :once (array)\n             :always js/undefined\n             :auto-deps (throw (js/Error. \"Cannot use :auto-deps outside of macro.\"))\n             (to-array deps))))\n\n\n(defmacro use-effect\n  \"Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   ;; we provide a CLJS defn in the case when we need to pass around the hook\n   ;; as a value. This will be slower, `:auto-deps` won't work and devtools will\n   ;; be harder to read\n   (defn use-effect*\n     \"Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\"\n     ([f] (react/useEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"))))\n      (react/useEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-layout-effect\n  \"Like `use-effect` but instead calls react/useLayoutEffect.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   (defn use-layout-effect*\n     \"Like `use-effect*` but instead calls react/useLayoutEffect.\"\n     ([f] (react/useLayoutEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"))))\n      (react/useLayoutEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-memo\n  \"Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body))\n          merge\n          {:tag (hana/inferred-type &env fn-body)}))\n        ([deps fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body)\n                         ~deps)\n          merge\n          {:tag (hana/inferred-type &env (last fn-body))}))))))\n\n\n#?(:cljs\n   (defn use-memo*\n     \"Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.\"\n     ([f] (react/useMemo f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"))))\n      (react/useMemo f (to-array deps)))))\n\n\n(defmacro use-callback\n  \"Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function.\"\n  {:style/indent :defn}\n  [deps & fn-body]\n  #?(:clj\n     (deps-macro-body\n      &env deps fn-body true\n      (fn\n        ([fn-body] `^function (raw-use-callback ~@fn-body))\n        ([deps fn-body] `^function (raw-use-callback ~@fn-body\n                                                     ~deps))))))\n\n#?(:cljs\n   (defn use-callback*\n     \"`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.\"\n     ([f] (react/useCallback f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"))))\n      (react/useCallback f (to-array deps)))))\n\n\n(defmacro use-imperative-handle\n  \"Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function.\"\n  {:style/indent :defn}\n  [ref deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `(raw-use-imperative-handle ref (fn [] ~@fn-body)))\n        ([deps fn-body] `(raw-use-imperative-handle\n                          (fn [] ~@fn-body)\n                          ~deps))))))\n\n\n#?(:cljs\n   (defn use-imperative-handle*\n     \"Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`\"\n     ([ref f] (react/useImperativeHandle ref f))\n     ([ref f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"))))\n      (react/useImperativeHandle ref f (to-array deps)))))\n\n\n#?(:cljs\n   (def use-debug-value\n     \"Just react/useDebugValue\"\n     react/useDebugValue))\n\n\n#?(:cljs\n   (defn use-subscription\n     \"Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`.\"\n     [{:keys [get-current-value subscribe]}]\n     (let [[state set-state] (react/useState\n                              (fn []\n                                ;; Read the current value from our subscription.\n                                ;; When this value changes, we'll schedule an update with React.\n                                ;; It's important to also store the hook params so that we can check for staleness.\n                                ;; (See the comment in checkForUpdates() below for more info.)\n                                #js {:get-current-value get-current-value\n                                     :subscribe subscribe\n                                     :value (get-current-value)}))]\n\n       ;; It is important not to subscribe while rendering because this can lead to memory leaks.\n       ;; (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n       ;; Instead, we wait until the commit phase to attach our handler.\n       ;;\n       ;; We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n       ;; so that we don't stretch the commit phase.\n       ;; This also has an added benefit when multiple components are subscribed to the same source:\n       ;; It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n       ;; (Learn more at https://codesandbox.io/s/k0yvr5970o)\n       (react/useEffect\n        (fn []\n          (let [did-unsubscribe #js {:value false}\n                check-for-updates\n                (fn check-for-updates\n                  []\n                  ;; It's possible that this callback will be invoked even after being unsubscribed,\n                  ;; if it's removed as a result of a subscription event/update.\n                  ;; In this case, React will log a DEV warning about an update from an unmounted component.\n                  ;; We can avoid triggering that warning with this check.\n                  (when (not (gobj/get did-unsubscribe \"value\"))\n                    (let [value (get-current-value)]\n                      (set-state\n                       (fn [prev]\n                         (cond\n                           ;; Ignore values from stale sources!\n                           ;; Since we subscribe and unsubscribe in a passive effect,\n                           ;; it's possible that this callback will be invoked for a stale (previous) subscription.\n                           ;; This check avoids scheduling an update for that stale subscription.\n                           (or (not= get-current-value\n                                     (gobj/get prev \"get-current-value\"))\n                               (not= subscribe\n                                     (gobj/get prev \"subscribe\")))\n                           prev\n\n                           ;; The moment we've all been waiting for... the entire\n                           ;; point of rewriting this hook in ClojureScript.\n                           ;; If the value is equal under Clojure equality to the\n                           ;; previous value, then return the previous value to\n                           ;; preserve reference equality and allow React to bail.\n                           (= value (gobj/get prev \"value\"))\n                           prev\n\n                           ;; return the new value\n                           :else #js {:get-current-value (gobj/get prev \"get-current-value\")\n                                      :subscribe (gobj/get prev \"subscribe\")\n                                      :value value}))))))\n                unsubscribe (subscribe check-for-updates)]\n            ;; Because we're subscribing in a passive effect,\n            ;; it's possible that an update has occurred between render and our effect handler.\n            ;; Check for this and schedule an update if work has occurred.\n            (check-for-updates)\n            (fn []\n              (gobj/set did-unsubscribe \"value\" true)\n              (unsubscribe))))\n        #js [get-current-value subscribe])\n\n       (if (or\n            (not= get-current-value (gobj/get state \"get-current-value\"))\n            (not= subscribe (gobj/get state \"subscribe\")))\n         ;; If parameters have changed since our last render,\n         ;; schedule an update with its current value.\n         (let [value (get-current-value)]\n           (set-state #js {:get-current-value get-current-value\n                           :subscribe subscribe\n                           :value value})\n           ;; If the subscription has been updated, we'll schedule another update with React.\n           ;; React will process this update immediately, so the old subscription value won't be committed.\n           ;; It is still nice to avoid returning a mismatched value though, so let's override the return value.\n           value)\n\n         ;; If parameters haven't changed, return value stored in state\n         (gobj/get state \"value\")))))\n","~:reader-features",["^E",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["helix.hooks/raw-use-effect","js/module$node_modules$react$index.useEffect","helix.hooks/raw-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","helix.hooks/raw-use-memo","js/module$node_modules$react$index.useMemo","helix.hooks/raw-use-callback","js/module$node_modules$react$index.useCallback","helix.hooks/raw-use-imperative-handle","js/module$node_modules$react$index.useImperativeHandle","helix.hooks/use-state","initial","vec__56260","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","x","f","xs","helix$hooks$use_state_$_updater","cljs.core.apply","helix.hooks/use-ref","ref","js/module$node_modules$react$index.useRef","x56272","cljs.core/PROTOCOL_SENTINEL","this","helix.hooks.goog$module$goog$object.set","G__56282","a","G__56288","G__56289","b","G__56295","G__56296","G__56297","var_args","G__56308","helix.hooks/use-reducer","js/Error","reducer","init-state","helix.hooks.use_reducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","cljs.core/ifn?","state","action","helix.hooks/use-context","js/module$node_modules$react$index.useContext","helix.hooks/wrap-fx","helix.hooks/simple-body?","body","cljs.core._EQ_","cljs.core/count","cljs.core/Symbol","cljs.core/first","helix.hooks/determine-deps","deps","G__56321","cljs.core/Keyword","cljs.core/to-array","G__56323","helix.hooks/use-effect*","goog/DEBUG","G__56335","helix.hooks/use-layout-effect*","G__56341","helix.hooks/use-memo*","G__56349","helix.hooks/use-callback*","G__56356","helix.hooks/use-imperative-handle*","helix.hooks/use-debug-value","js/module$node_modules$react$index.useDebugValue","p__56362","map__56363","cljs.core/--destructure-map","cljs.core.get","helix.hooks/use-subscription","get-current-value","subscribe","vec__56367","set-state","did-unsubscribe","check-for-updates","cljs.core/not","helix.hooks.goog$module$goog$object.get","value","G__56380","prev","cljs.core.not_EQ_","unsubscribe","G__56404"]],"~:used-vars",["^E",["~$js/module$node_modules$react$index.useMemo","~$helix.hooks/use-ref","~$cljs.core/to-array","~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$helix.hooks/use-subscription","~$js/undefined","~$helix.hooks/use-callback*","~$helix.hooks/use-memo*","~$helix.hooks/use-reducer","~$cljs.core/=","~$cljs.core/ifn?","~$cljs.core/count","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/not=","~$helix.hooks/raw-use-imperative-handle","~$helix.hooks/raw-use-layout-effect","~$helix.hooks/wrap-fx","~$helix.hooks.goog$module$goog$object.set","~$helix.hooks/simple-body?","~$helix.hooks/use-imperative-handle*","~$cljs.core/fn?","~$js/module$node_modules$react$index.useCallback","~$cljs.core/get","~$js/module$node_modules$react$index.useContext","~$helix.hooks/determine-deps","~$goog/DEBUG","~$js/module$node_modules$react$index.useLayoutEffect","~$helix.hooks/use-effect*","~$helix.hooks/use-layout-effect*","~$cljs.core/nth","~$js/module$node_modules$react$index.useState","~$js/module$node_modules$react$index.useDebugValue","~$js/module$node_modules$react$index.useReducer","~$js/module$node_modules$react$index.useRef","~$cljs.core/not","~$helix.hooks/raw-use-callback","~$helix.hooks/raw-use-effect","~$cljs.core/Symbol","~$js/module$node_modules$react$index.useEffect","~$js/module$node_modules$react$index.useImperativeHandle","~$helix.hooks/use-state","~$cljs.core/first","~$helix.hooks/use-context","~$helix.hooks/use-debug-value","~$helix.hooks.goog$module$goog$object.get","~$js/Error","~$helix.hooks/raw-use-memo"]]],"~:cache-keys",["~#cmap",[["^1H","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^E",[]],"~:deps-syms",["^1;","~$goog.dom.HtmlElement"]]],["^1H","helix/hooks.cljc"],["c4fc86865d8912be425619477c4547bfc64b7ab5","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^1:","^14","^18"]]],["^1H","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.array","^18","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1H","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^36"]]],["^1H","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37"]]],["^1H","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1H","shadow/js.js"],["c0ae67ac68acf29d6a773b8c37c8a78ea1cd9d10","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37"]]],"~:SHADOW-TIMESTAMP",[1656502724000,1656502724000,1656502730000],["^3>","node_modules/react/cjs/react.development.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","754b7a48941975257c8955f6d5e511cb3a878737","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^3?","~$module$node_modules$object_assign$index"]]],["^1H","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","~$goog.reflect"]]],["^1H","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","~$goog.fs.blob","^38","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3:","^3;","^3<","^3="]]],["^1H","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^3<","~$goog.html.SafeUrl","^3=","^37","^36"]]],["^1H","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3F","~$goog.html.SafeStyle","^3H","^39","~$goog.html.uncheckedconversions","^3<","^36"]]],["^1H","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^3<","^3:","^3;","^3F","^3L","~$goog.html.SafeStyleSheet","^3H","~$goog.dom.TagName","^39","^3=","^37","~$goog.labs.userAgent.browser","^34","^18","^36","~$goog.dom.tags","^3G"]]],["^1H","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^18"]]],["^1H","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1H","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^34","^37","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1H","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^3>","node_modules/object-assign/index.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","519ffd5a4c91b67302cc9947b794966d629860cd","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^3?"]]],["^1H","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",[]]],["^1H","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^34","^18"]]],["^3>","node_modules/react/cjs/react.production.min.js"],["8bb0911dc09f89ce920abf1f1dfe18bfb7491740","384258095da6e9258793235bf5e297a992d36fca","0a81b45abe33f0ad39b726512604018f94261db9","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^3?","^3C"]]],["^1H","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.dom.safe","^3M","^3<","^36"]]],["^1H","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.labs.userAgent","^36"]]],["^1H","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","^3K","^3F","^3L","^3N","^3H","^39","^3<","^36","^3:"]]],["^1H","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;"]]],["^1H","cljs/core.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","~$goog.math.Long","~$goog.math.Integer","^3U","^18","^34","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1H","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^3<","^3=","^3G","^37"]]],["^1H","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^3<","^3L","^3=","^18","^37","^36"]]],["^1H","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^3D"]]],["^1H","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","^3U"]]],["^1H","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2[",["^ ","^30",null,"^31",["^E",[]],"^32",["^1;","^37","^3="]]]]],"~:clj-info",["^ ","jar:file:/Users/dudleycraig/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1656502733000,"jar:file:/Users/dudleycraig/.m2/repository/lilactown/helix/0.1.4/helix-0.1.4.jar!/helix/hooks.cljc",1656585588000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1656502733000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1656502733000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64.clj",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/instant.clj",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/zip.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/impl.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/util.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/compiler.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/api.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/externs.clj",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/tagged_literals.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes/and_or.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1656502715000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1656502733000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/js_deps.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/lilactown/helix/0.1.4/helix-0.1.4.jar!/helix/impl/analyzer.clj",1656585588000,"jar:file:/Users/dudleycraig/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1666643175000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1656502733000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1656502717000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/env.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/core.cljc",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map.clj",1656502730000,"jar:file:/Users/dudleycraig/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64_vlq.clj",1656502730000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.","^7","helix/hooks.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F",["^ ","^G",["^ ","^H","^I","^J","^K","^7","helix/hooks.cljc","^9",1,"^8",219,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^R"]]],"^6","Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function."],"^S",["^ ","^H","^I","^J","^T","^7","helix/hooks.cljc","^9",1,"^8",278,"^L",true,"^M","^N","^O",["^P",[["^U","^Q","~$&","^R"]]],"^6","Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function."],"^V",["^ ","^H","^I","^J","^W","^7","helix/hooks.cljc","^9",1,"^8",195,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^R"]]],"^6","Like `use-effect` but instead calls react/useLayoutEffect."],"^X",["^ ","^H","^I","^J","^Y","^7","helix/hooks.cljc","^9",1,"^8",163,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^R"]]],"^6","Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined."],"^Z",["^ ","^H","^I","^J","^[","^7","helix/hooks.cljc","^9",1,"^8",253,"^L",true,"^M","^N","^O",["^P",[["^Q","~$&","^10"]]],"^6","Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function."]],"~:shadow/js-access-properties",["^E",["useLayoutEffect","useRef","useCallback","useImperativeHandle","useDebugValue","useMemo","useReducer","useEffect","useState","useContext"]],"^J","^I","^11",["^ "],"^12",["^ ","^13","^14"],"^16",null,"^17",["^ ","^18","^18","^19","^18","^1:","^1:","^1;","^1;","^14","^14","^1<","^14"],"^1=",["^E",["^1>","^1?"]],"~:shadow/js-access-global",["^E",["undefined","Error"]],"^1@",null,"~:defs",["^ ","~$use-ref",["^ ","~:protocol-inline",null,"^5",["^ ","^7","helix/hooks.cljc","^8",53,"^9",10,"^:",53,"^;",17,"^O",["^P",["~$quote",["^P",[["~$x"]]]]],"^6","Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`"],"^J","^1U","^7","helix/hooks.cljc","^;",17,"~:method-params",["^P",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^9",4,"~:variadic?",false,"^8",53,"~:ret-tag","~$js","^:",53,"~:max-fixed-arity",1,"~:fn-var",true,"^O",["^P",["^50",["^P",[["~$x"]]]]],"^6","Like react/useRef. Supports accessing the \"current\" property via\n     dereference (@) and updating the \"current\" property via `reset!` and\n     `swap!`"],"~$use-subscription",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",313,"^9",10,"^:",313,"^;",26,"^O",["^P",["^50",["^P",[[["^ ","~:keys",["~$get-current-value","~$subscribe"]]]]]]],"^6","Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`."],"^J","^1Y","^7","helix/hooks.cljc","^;",26,"^51",["^P",[["~$p__56362"]]],"^52",null,"^53",["^P",[null,null]],"^9",4,"^54",false,"^8",313,"^55","~$any","^:",313,"^57",1,"^58",true,"^O",["^P",["^50",["^P",[[["^ ","^5:",["^5;","^5<"]]]]]]],"^6","Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way–\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`."],"~$use-memo*",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",242,"^9",10,"^:",242,"^;",19,"^O",["^P",["^50",["^P",[["~$f"],["~$f","^Q"]]]]],"^6","Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.","~:top-fn",["^ ","^54",false,"~:fixed-arity",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]]],"^J","^20","^7","helix/hooks.cljc","^;",19,"^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]],"^51",[["~$f"],["~$f","^Q"]],"^52",null,"^5A",2,"^53",["^P",[null,null]],"^9",4,"^54",false,"~:methods",[["^ ","^5A",1,"^54",false,"~:tag","^56"],["^ ","^5A",2,"^54",false,"^5C","^56"]],"^8",242,"^:",242,"^57",2,"^58",true,"^O",["^P",[["~$f"],["~$f","^Q"]]],"^6","Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`."],"~$use-reducer",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",84,"^9",10,"^:",84,"^;",21,"^O",["^P",["^50",["^P",[["~$reducer","~$init-state"],["^5E","^5F","~$init"]]]]],"^6","Just react/useReducer.","^5@",["^ ","^54",false,"^5A",3,"^57",3,"^51",[["^5E","^5F"],["^5E","^5F","^5G"]],"^O",["^P",[["^5E","^5F"],["^5E","^5F","^5G"]]],"^53",["^P",[null,null]]]],"^J","^21","^7","helix/hooks.cljc","^;",21,"^5@",["^ ","^54",false,"^5A",3,"^57",3,"^51",[["^5E","^5F"],["^5E","^5F","^5G"]],"^O",["^P",[["^5E","^5F"],["^5E","^5F","^5G"]]],"^53",["^P",[null,null]]],"^51",[["^5E","^5F"],["^5E","^5F","^5G"]],"^52",null,"^5A",3,"^53",["^P",[null,null]],"^9",4,"^54",false,"^5B",[["^ ","^5A",2,"^54",false,"^5C","^5>"],["^ ","^5A",3,"^54",false,"^5C","^56"]],"^8",84,"^:",84,"^57",3,"^58",true,"^O",["^P",[["^5E","^5F"],["^5E","^5F","^5G"]]],"^6","Just react/useReducer."],"~$use-callback*",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",267,"^9",10,"^:",267,"^;",23,"^O",["^P",["^50",["^P",[["~$f"],["~$f","^Q"]]]]],"^6","~`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.","^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]]],"^J","^1[","^7","helix/hooks.cljc","^;",23,"^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]],"^51",[["~$f"],["~$f","^Q"]],"^52",null,"^5A",2,"^53",["^P",[null,null]],"^9",4,"^54",false,"^5B",[["^ ","^5A",1,"^54",false,"^5C","^56"],["^ ","^5A",2,"^54",false,"^5C","^56"]],"^8",267,"^:",267,"^57",2,"^58",true,"^O",["^P",[["~$f"],["~$f","^Q"]]],"^6","~`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`."],"~$raw-use-layout-effect",["^ ","^J","^29","^7","helix/hooks.cljc","^8",23,"^9",8,"^:",23,"^;",34,"^5",["^ ","^7","helix/hooks.cljc","^8",23,"^9",13,"^:",23,"^;",34],"^5C","^56"],"~$raw-use-imperative-handle",["^ ","^J","^28","^7","helix/hooks.cljc","^8",26,"^9",8,"^:",26,"^;",38,"^5",["^ ","^7","helix/hooks.cljc","^8",26,"^9",13,"^:",26,"^;",38],"^5C","^56"],"~$wrap-fx",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",109,"^9",10,"^:",109,"^;",17,"^O",["^P",["^50",["^P",[["~$f"]]]]]],"^J","^2:","^7","helix/hooks.cljc","^;",17,"^51",["^P",[["~$f"]]],"^52",null,"^53",["^P",[null,null]],"^9",4,"^54",false,"^8",109,"^55","~$function","^:",109,"^57",1,"^58",true,"^O",["^P",["^50",["^P",[["~$f"]]]]]],"~$simple-body?",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",117,"^9",7,"^:",117,"^;",19,"^O",["^P",["^50",["^P",[["^R"]]]]]],"^J","^2<","^7","helix/hooks.cljc","^;",19,"^51",["^P",[["^R"]]],"^52",null,"^53",["^P",[null,null]],"^9",1,"^54",false,"^8",117,"^55","~$boolean","^:",117,"^57",1,"^58",true,"^O",["^P",["^50",["^P",[["^R"]]]]]],"~$use-imperative-handle*",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",295,"^9",10,"^:",295,"^;",32,"^O",["^P",["^50",["^P",[["^U","~$f"],["^U","~$f","^Q"]]]]],"^6","Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`","^5@",["^ ","^54",false,"^5A",3,"^57",3,"^51",[["^U","~$f"],["^U","~$f","^Q"]],"^O",["^P",[["^U","~$f"],["^U","~$f","^Q"]]],"^53",["^P",[null,null]]]],"^J","^2=","^7","helix/hooks.cljc","^;",32,"^5@",["^ ","^54",false,"^5A",3,"^57",3,"^51",[["^U","~$f"],["^U","~$f","^Q"]],"^O",["^P",[["^U","~$f"],["^U","~$f","^Q"]]],"^53",["^P",[null,null]]],"^51",[["^U","~$f"],["^U","~$f","^Q"]],"^52",null,"^5A",3,"^53",["^P",[null,null]],"^9",4,"^54",false,"^5B",[["^ ","^5A",2,"^54",false,"^5C","^56"],["^ ","^5A",3,"^54",false,"^5C","^56"]],"^8",295,"^:",295,"^57",3,"^58",true,"^O",["^P",[["^U","~$f"],["^U","~$f","^Q"]]],"^6","Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`"],"~$determine-deps",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",155,"^9",16,"^:",155,"^;",30,"^O",["^P",["^50",["^P",[["^Q"]]]]]],"^J","^2B","^7","helix/hooks.cljc","^;",30,"^51",["^P",[["^Q"]]],"^52",null,"^53",["^P",[null,null]],"^9",10,"^54",false,"^8",155,"^:",155,"^57",1,"^58",true,"^O",["^P",["^50",["^P",[["^Q"]]]]]],"~$use-layout-effect*",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",209,"^9",10,"^:",209,"^;",28,"^O",["^P",["^50",["^P",[["~$f"],["~$f","^Q"]]]]],"^6","Like `use-effect*` but instead calls react/useLayoutEffect.","^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]]],"^J","^2F","^7","helix/hooks.cljc","^;",28,"^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]],"^51",[["~$f"],["~$f","^Q"]],"^52",null,"^5A",2,"^53",["^P",[null,null]],"^9",4,"^54",false,"^5B",[["^ ","^5A",1,"^54",false,"^5C","^56"],["^ ","^5A",2,"^54",false,"^5C","^56"]],"^8",209,"^:",209,"^57",2,"^58",true,"^O",["^P",[["~$f"],["~$f","^Q"]]],"^6","Like `use-effect*` but instead calls react/useLayoutEffect."],"~$use-effect*",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",185,"^9",10,"^:",185,"^;",21,"^O",["^P",["^50",["^P",[["~$f"],["~$f","^Q"]]]]],"^6","Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.","^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]]],"^J","^2E","^7","helix/hooks.cljc","^;",21,"^5@",["^ ","^54",false,"^5A",2,"^57",2,"^51",[["~$f"],["~$f","^Q"]],"^O",["^P",[["~$f"],["~$f","^Q"]]],"^53",["^P",[null,null]]],"^51",[["~$f"],["~$f","^Q"]],"^52",null,"^5A",2,"^53",["^P",[null,null]],"^9",4,"^54",false,"^5B",[["^ ","^5A",1,"^54",false,"^5C","^56"],["^ ","^5A",2,"^54",false,"^5C","^56"]],"^8",185,"^:",185,"^57",2,"^58",true,"^O",["^P",[["~$f"],["~$f","^Q"]]],"^6","Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`."],"~$raw-use-callback",["^ ","^J","^2M","^7","helix/hooks.cljc","^8",25,"^9",8,"^:",25,"^;",29,"^5",["^ ","^7","helix/hooks.cljc","^8",25,"^9",13,"^:",25,"^;",29],"^5C","^56"],"~$raw-use-effect",["^ ","^J","^2N","^7","helix/hooks.cljc","^8",22,"^9",8,"^:",22,"^;",27,"^5",["^ ","^7","helix/hooks.cljc","^8",22,"^9",13,"^:",22,"^;",27],"^5C","^56"],"~$use-state",["^ ","^4[",null,"^5",["^ ","^7","helix/hooks.cljc","^8",30,"^9",10,"^:",30,"^;",19,"^O",["^P",["^50",["^P",[["~$initial"]]]]],"^6","Like `react/useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```"],"^J","^2R","^7","helix/hooks.cljc","^;",19,"^51",["^P",[["^5V"]]],"^52",null,"^53",["^P",[null,null]],"^9",4,"^54",false,"^8",30,"^55","~$cljs.core/IVector","^:",30,"^57",1,"^58",true,"^O",["^P",["^50",["^P",[["^5V"]]]]],"^6","Like `react/useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```"],"~$use-context",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",102,"^9",9,"^:",102,"^;",20],"^J","^2T","^7","helix/hooks.cljc","^;",20,"^9",4,"^8",102,"^:",102,"^5C","^56","^6","Just react/useContext"],"~$use-debug-value",["^ ","^5",["^ ","^7","helix/hooks.cljc","^8",307,"^9",9,"^:",307,"^;",24],"^J","^2U","^7","helix/hooks.cljc","^;",24,"^9",4,"^8",307,"^:",307,"^5C","^56","^6","Just react/useDebugValue"],"~$raw-use-memo",["^ ","^J","^2X","^7","helix/hooks.cljc","^8",24,"^9",8,"^:",24,"^;",25,"^5",["^ ","^7","helix/hooks.cljc","^8",24,"^9",13,"^:",24,"^;",25],"^5C","^56"]],"^1?",["^ ","^I","^I","^1:","^1:"],"~:cljs.analyzer/constants",["^ ","^1=",["^E",["~:else","~:auto-deps","~:subscribe","~:get-current-value"]],"~:order",["^61","^63","^62","^60"]],"^1D",["^ ","^1>",["^E",[]],"^1?",["^E",[]]],"^1E",["^ ","^13",["^ ","^1C","^1<"]],"^1F",["^1;","^1:","^14","^18"]],"^H","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^E",[]],"~:compiler-options",["^2Z",[["^67","~:static-fns"],true,["^67","~:shadow-tweaks"],null,["^67","~:source-map-inline"],null,["^67","~:elide-asserts"],false,["^67","~:optimize-constants"],null,["^67","^1K"],null,["^67","~:external-config"],["^ ","~:main.build/env",["^ ","~:main.system/app",["^ ","~:messaging",["^ ","~:key","~:main.system/messaging"],"~:routing",["^ ","^6A","~:main.system/routing"],"~:firebase",["^ ","^6A","~:main.system/firebase"],"~:config",["^ ","~:mount-id","main"]],"^6D",["^ ","^6@",["^ ","^6A","^6B"],"^6G",["^ ","~:router",["/",["",["^ ","^J","~:root"]],["home",["^ ","^J","~:home","~:title","home","~:icon","^6K"]],["about",["^ ","^J","~:about","^6L","about","^6M","~:info"]],["portfolio",["^ ","^J","~:portfolio","^6L","portfolio","^6M","~:images"]],["contact",["^ ","^J","~:contact","^6L","contact","^6M","~:envelope"]],["resume",["^ ","^J","~:resume","^6L","resumé","^6M","~:user"]]]]],"^6F",["^ ","^6@",["^ ","^6A","^6B"],"^6G",["^ ","~:api-key","AIzaSyDegND1W5CPpHnlcT3f0AwICkJwI8QWQvY","~:auth-domain","functional-256207.firebaseapp.com","~:project-id","functional-256207","~:storage-bucket","functional-256207.appspot.com","~:messaging-sender-id","996616380561","~:app-id","1:996616380561:web:406750a7fa6668ac8e5f30","~:measurement-id","G-S3RWRYJ7VL","~:database-url","https://functional-256207-default-rtdb.europe-west1.firebasedatabase.app"]],"^6B",["^ ","~:messages",["^ ","~:system",["^ ","~:status","info","~:text","initial system message"]]]]],["^67","~:tooling-config"],null,["^67","~:emit-constants"],null,["^67","~:load-tests"],null,["^67","~:form-size-threshold"],null,["^67","~:global-goog-object&array"],null,["^67","~:data-readers"],null,["^67","~:infer-externs"],"~:auto",["^67","^1M"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^67","~:fn-invoke-direct"],null,["^67","~:source-map"],"/dev/null"]]]